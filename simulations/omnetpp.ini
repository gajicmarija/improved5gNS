# Hierarchical Token Bucket Implementation for OMNeT++ & INET Framework
# Copyright (C) 2021 Marija GajiÄ‡ (NTNU), Marcin Bosk (TUM), Susanna Schwarzmann (TU Berlin), Stanislav Lange (NTNU), and Thomas Zinner (NTNU)
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
# 
[General]

sim-time-limit=250s
num-rngs = 1
seed-0-mt = 8
#output-scalar-file-append = false
#record-eventlog = false
#cmdenv-express-mode = false
#cmdenv-output-file = log.txt
#cmdenv-autoflush = true
**.cmdenv-log-level = info

*.visualizer.*.interfaceTableVisualizer.displayInterfaceTables = true

**.tcp.typename = "Tcp"
**.udp.typename = "Udp"



# tcp general settings
**.tcp.advertisedWindow = 65535                      # in bytes, corresponds with the maximal receiver buffer capacity (Note: normally, NIC queues should be at least this size)
**.tcp.delayedAcksEnabled = false                    # delayed ACK algorithm (RFC 1122) enabled/disabled
**.tcp.nagleEnabled = true                           # Nagle"s algorithm (RFC 896) enabled/disabled
**.tcp.limitedTransmitEnabled = false                # Limited Transmit algorithm (RFC 3042) enabled/disabled (can be used for TCPReno/TCPTahoe/TCPNewReno/TCPNoCongestionControl)
**.tcp.increasedIWEnabled = false                    # Increased Initial Window (RFC 3390) enabled/disabled
**.tcp.sackSupport = false                           # Selective Acknowledgment (RFC 2018, 2883, 3517) support (header option) (SACK will be enabled for a connection if both endpoints support it)
**.tcp.windowScalingSupport = false                  # Window Scale (RFC 1323) support (header option) (WS will be enabled for a connection if both endpoints support it)
**.tcp.timestampSupport = false                      # Timestamps (RFC 1323) support (header option) (TS will be enabled for a connection if both endpoints support it)
**.tcp.mss = 1452                                    # Maximum Segment Size (RFC 793) (header option)
**.tcp.tcpAlgorithmClass = "TcpReno"                 # TCPReno/TCPTahoe/TCPNewReno/TCPNoCongestionControl/DumbTCP
**.tcp.*.*.vector-recording = true
**.tcp.*.rtt.result-recording-modes = +vector
**.tcp.*.*.result-recording-modes = +vector
**.host*.app*.*.vector-recording = true
**.ppp.*xPk*.vector-recording = true
**.router*.ppp[0].queue.*.vector-recording = true
**.ppp.queue*.vector-recording = true

#**.tcp.*.*.vector-recording = true
#**.tcp.*.rtt.result-recording-modes = +vector
#**.tcp.*.*.result-recording-modes = -vector
#**.host*.app*.*.vector-recording = true
#**.server*.app*.*.vector-recording = true
#**.ppp.*xPk*.vector-recording = true
#**.ppp.*.vector-recording = true



#**.ppp.queue*.vector-recording = true
#**.ppp.queue*.vector-recording = true
#**.ppp.queue*.*.vector-recording = true
#**.ppp.queue.*.vector-recording = true
#**.ppp.queue.*.*.vector-recording = true
#**.ppp.queue*.vector-recording = true
*.router*.ppp[0].ppp.vector-recording = true
**.vector-recording = false

[Config liteCbaselineTestExampleTopoVisualizer]
description = "Visualize base topology"
network = baselineTestQoS
sim-time-limit=400s

output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

*.visualizer.*.interfaceTableVisualizer.displayInterfaceTables = false

**.crcMode = "computed"

*.nVID = ${numCli=1,2,10,20,30,40,50,60,70,80} # Number of video clients
*.nLVD = ${numCli} # Number of file download clients
*.nFDO = ${numCli} # Number of file download clients
*.nSSH = ${numCli} # Number of SSH clients
*.nVIP = ${numCli} # Number of VoIP clients
*.ncVIP = ${numCli} # Number of critical VoIP clients

**.numApps = 0

[Config liteCbaselineTestTokenQoS_base]
description = "All five applications - base configuration without any resource allocation"
network = baselineTestQoS
sim-time-limit=280s

output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed"
*.host*.numApps = 1

#*.configurator.config = xmldoc("configs/baseQoS/routerConfigBaseHtbTest.xml")

# File download client
*.hostFDO[*].hasTcp = true
*.hostFDO[*].app[0].typename = "improved5gns.apps.TcpFileDownloadApp"
*.hostFDO[*].app[0].localAddress = ""
*.hostFDO[*].app[0].localPort = -1 # port number to listen on
*.hostFDO[*].app[0].connectAddress = "serverFDO" # server address (may be symbolic)
*.hostFDO[*].app[0].connectPort = 1042 # port number to connect to
*.hostFDO[*].app[0].startTime = uniform(0.01s,1s) # time first session begins
*.hostFDO[*].app[0].stopTime = -1s # time of finishing sending, negative values mean forever
*.hostFDO[*].app[0].numRequestsPerSession = 1 # number of requests sent per session
*.hostFDO[*].app[0].requestLength = 800B # length of a request
*.hostFDO[*].app[0].replyLength = 10000KiB # length of a reply
*.hostFDO[*].app[0].thinkTime = 0.01s # time gap between requests
*.hostFDO[*].app[0].idleInterval = 1s # time gap between sessions
*.hostFDO[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect
*.hostFDO[*].app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished
*.hostFDO[*].app[0].stopOperationTimeout = 2s # timeout value for lifecycle stop operation

# File download server
*.serverFDO.hasTcp = true
*.serverFDO.numApps = 1
*.serverFDO.app[0].typename = "TcpGenericServerApp"
*.serverFDO.app[0].localAddress = "" # local address; may be left empty ("")
*.serverFDO.app[0].localPort = 1042 # localPort number to listen on
*.serverFDO.app[0].replyDelay = 0s #
*.serverFDO.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished
*.serverFDO.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation

# Video client
**.hostVID[*].hasTcp = true
**.hostVID[*].app[0].typename = "improved5gns.apps.TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("")
**.hostVID[*].app[0].localPort = -1 # port number to listen on
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic)
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to
**.hostVID[*].app[0].dataTransferMode = "object"
**.hostVID[*].app[0].startTime = uniform(0.01s,1s) # time first session begins
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity
**.hostVID[*].app[0].idleInterval = 1s
**.hostVID[*].app[0].requestLength = 200B # length of a request
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session
**.hostVID[*].app[0].thinkTime = 1s # time gap between requests
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels)
**.hostVID[*].app[0].manifest_size = 100000
**.hostVID[*].app[0].video_buffer_max_length = 30s #40s # buffer max length in seconds
**.hostVID[*].app[0].video_duration = int(uniform(120s,200s))#int(uniform(240s,320s)) # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible"

# Video server
*.serverVID.hasTcp = true
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp"
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("")
*.serverVID.app[0].localPort = 1042 # localPort number to listen on
*.serverVID.app[0].replyDelay = 0s #
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished
*.serverVID.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation

# Live Video client
**.hostLVD[*].hasTcp = true
**.hostLVD[*].app[0].typename = "improved5gns.apps.TCPLiveVideoStreamCliAppLite"
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("")
**.hostLVD[*].app[0].localPort = -1 # port number to listen on
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic)
**.hostLVD[*].app[0].connectPort = 1043 # port number to connect to
**.hostLVD[*].app[0].dataTransferMode = "object"
**.hostLVD[*].app[0].startTime = uniform(0.01s,1s) # time first session begins
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity
**.hostLVD[*].app[0].idleInterval = 1s
**.hostLVD[*].app[0].requestLength = 200B # length of a request
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session
**.hostLVD[*].app[0].thinkTime = 1s # time gap between requests
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels)
**.hostLVD[*].app[0].manifest_size = 100000
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds
**.hostLVD[*].app[0].video_duration = int(uniform(40s,70s)) # video length in seconds
**.hostLVD[*].app[0].segment_length = 1s # video segment length in seconds
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible"
**.hostLVD[*].app[0].video_type = "live"
**.hostLVD[*].app[0].delay_threshold = 4
**.hostLVD[*].app[0].speedup_rate = 1.05

# Live Video server
*.serverLVD.hasTcp = true
*.serverLVD.numApps = 1
*.serverLVD.app[0].typename = "TcpGenericServerApp"
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1043 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s #
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation

# Remote Shell Client
**.hostSSH[*].hasTcp = true
**.hostSSH[*].app[0].typename = "improved5gns.apps.TcpSimpleSshAppV2lite"
**.hostSSH[*].app[0].localAddress = "" # local address or empty ("")
**.hostSSH[*].app[0].localPort = -1 # local port number
**.hostSSH[*].app[0].connectAddress = "serverSSH" # server address (may be symbolic)
**.hostSSH[*].app[0].connectPort = 22  # port number to connect to
**.hostSSH[*].app[0].startTime = uniform(0.01s,1s) # time first session begins
**.hostSSH[*].app[0].stopTime = -1s # time of finishing sending, negative values mean forever
**.hostSSH[*].app[0].numCommands = 1 # user types this many commands in a session
**.hostSSH[*].app[0].commandLength = 10B # commands are this many characters (plus Enter)
**.hostSSH[*].app[0].keyPressDelay = 0.05s # delay between keypresses
**.hostSSH[*].app[0].commandOutputLength = 500B # commands produce this much output
**.hostSSH[*].app[0].thinkTime = 1s # user waits this much before starting to type new command
**.hostSSH[*].app[0].idleInterval = 1s # time gap between sessions
**.hostSSH[*].app[0].reconnectInterval = 1s # if connection breaks, user waits this much before trying to reconnect
**.hostSSH[*].app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished
**.hostSSH[*].app[0].stopOperationTimeout = 2s # timeout value for lifecycle stop operation

# SSH server
*.serverSSH.hasTcp = true
*.serverSSH.numApps = 1
*.serverSSH.app[*].typename = "TcpGenericServerApp"
*.serverSSH.app[*].localAddress = "" # local address; may be left empty ("")
*.serverSSH.app[*].localPort = 22 # localPort number to listen on
*.serverSSH.app[*].replyDelay = 0s #
*.serverSSH.app[*].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished
*.serverSSH.app[*].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation

# VoIP receiver
**.hostVIP[*].hasUdp = true
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver"
**.hostVIP[*].app[0].localPort = 2000
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio
**.hostVIP[*].app[0].playoutDelay = 20ms # initial delay for beginning playout after receiving the first packet
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet)

# VoIP sender
**.serverVIP.hasUdp = true
**.serverVIP.numApps = parent.nVIP
**.serverVIP.app[*].typename = "SimpleVoipSender"
**.serverVIP.app[*].localPort = -1
**.serverVIP.app[*].destPort = 2000
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]"
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s)
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s)
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets
**.serverVIP.app[*].startTime = uniform(0.01s,1s) # time of start sending
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever

# Critical VoIP receiver
**.hostcVIP[*].hasUdp = true
**.hostcVIP[*].app[0].typename = "improved5gns.apps.SimpleVoipReceiverCustom"
**.hostcVIP[*].app[0].localPort = 2000
**.hostcVIP[*].app[0].emodelIe = 5 # Equipment impairment factor
**.hostcVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor
**.hostcVIP[*].app[0].emodelA = 5 # Advantage factor
**.hostcVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio
**.hostcVIP[*].app[0].playoutDelay = 20ms # initial delay for beginning playout after receiving the first packet
**.hostcVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt
**.hostcVIP[*].app[0].bufferSpace = 20 # buffer size in packets
**.hostcVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet)

# Critical VoIP sender
**.servercVIP.hasUdp = true
**.servercVIP.numApps = parent.ncVIP
**.servercVIP.app[*].typename = "improved5gns.apps.SimpleVoipSenderCustom"
**.servercVIP.app[*].localPort = -1
**.servercVIP.app[*].destPort = 2000
**.servercVIP.app[*].destAddress = "hostcVIP[" + string(index) + "]"
**.servercVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes
**.servercVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s)
**.servercVIP.app[*].silenceDuration = weibull(0.899s, 1.089s)
**.servercVIP.app[*].packetizationInterval = 2ms # interval between sending voice packets, changed from 20ms to 2ms for Critical VIP
**.servercVIP.app[*].startTime = uniform(0.01s,1s) # time of start sending
**.servercVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever




#[Config qoeSlicingTestingBase_R100_Q35_M100_C100]
#description = "Configuration for qoeSlicingTestingBase_R100_Q35_M100_C100. All five applications. QoS employed. Guarantee Multiplier: 1.0; Ceil multiplier: 1.0"
#
#extends = liteCbaselineTestTokenQoS_base
#
#*.configurator.config = xmldoc("configs/baseQoS/qoeSlicingTestingBase_R100_Q35_M100_C100Routing.xml")
#
#*.nVID = 57 # Number of video clients
#*.nLVD = 26 # Number of live video client
#*.nFDO = 7 # Number of file download clients
#*.nSSH = 10 # Number of SSH clients
#*.nVIP = 40 # Number of VoIP clients
#
#.router*.ppp[0].queue.typename = "HtbQueue"
#*.router*.ppp[0].queue.numQueues = 5
#*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
#*.router*.ppp[0].queue.packetCapacity = -1
#*.router*.ppp[0].queue.htbHysterisis = false
#*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/qoeSlicingTestingBase_R100_Q35_M100_C100HTB.xml")
#*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
#*.router0.ppp[0].ppp.queue.classifier.packetDataFilters = "sourceAddress(10.0.0.0);sourceAddress(10.0.0.4);sourceAddress(10.0.0.8);sourceAddress(10.0.0.12);sourceAddress(10.0.0.16);sourceAddress(10.0.0.20);sourceAddress(10.0.0.24);sourceAddress(10.0.0.28);sourceAddress(10.0.0.32);sourceAddress(10.0.0.36);sourceAddress(10.0.0.40);sourceAddress(10.0.0.44);sourceAddress(10.0.0.48);sourceAddress(10.0.0.52);sourceAddress(10.0.0.56);sourceAddress(10.0.0.60);sourceAddress(10.0.0.64);sourceAddress(10.0.0.68);sourceAddress(10.0.0.72);sourceAddress(10.0.0.76);sourceAddress(10.0.0.80);sourceAddress(10.0.0.84);sourceAddress(10.0.0.88);sourceAddress(10.0.0.92);sourceAddress(10.0.0.96);sourceAddress(10.0.0.100);sourceAddress(10.0.0.104);sourceAddress(10.0.0.108);sourceAddress(10.0.0.112);sourceAddress(10.0.0.116);sourceAddress(10.0.0.120);sourceAddress(10.0.0.124);sourceAddress(10.0.0.128);sourceAddress(10.0.0.132);sourceAddress(10.0.0.136);sourceAddress(10.0.0.140);sourceAddress(10.0.0.144);sourceAddress(10.0.0.148);sourceAddress(10.0.0.152);sourceAddress(10.0.0.156);sourceAddress(10.0.0.160);sourceAddress(10.0.0.164);sourceAddress(10.0.0.168);sourceAddress(10.0.0.172);sourceAddress(10.0.0.176);sourceAddress(10.0.0.180);sourceAddress(10.0.0.184);sourceAddress(10.0.0.188);sourceAddress(10.0.0.192);sourceAddress(10.0.0.196);sourceAddress(10.0.0.200);sourceAddress(10.0.0.204);sourceAddress(10.0.0.208);sourceAddress(10.0.0.212);sourceAddress(10.0.0.216);sourceAddress(10.0.0.220);sourceAddress(10.0.0.224);sourceAddress(10.1.0.0);sourceAddress(10.1.0.4);sourceAddress(10.1.0.8);sourceAddress(10.1.0.12);sourceAddress(10.1.0.16);sourceAddress(10.1.0.20);sourceAddress(10.1.0.24);sourceAddress(10.1.0.28);sourceAddress(10.1.0.32);sourceAddress(10.1.0.36);sourceAddress(10.1.0.40);sourceAddress(10.1.0.44);sourceAddress(10.1.0.48);sourceAddress(10.1.0.52);sourceAddress(10.1.0.56);sourceAddress(10.1.0.60);sourceAddress(10.1.0.64);sourceAddress(10.1.0.68);sourceAddress(10.1.0.72);sourceAddress(10.1.0.76);sourceAddress(10.1.0.80);sourceAddress(10.1.0.84);sourceAddress(10.1.0.88);sourceAddress(10.1.0.92);sourceAddress(10.1.0.96);sourceAddress(10.1.0.100);sourceAddress(10.2.0.0);sourceAddress(10.2.0.4);sourceAddress(10.2.0.8);sourceAddress(10.2.0.12);sourceAddress(10.2.0.16);sourceAddress(10.2.0.20);sourceAddress(10.2.0.24);sourceAddress(10.3.0.0);sourceAddress(10.3.0.4);sourceAddress(10.3.0.8);sourceAddress(10.3.0.12);sourceAddress(10.3.0.16);sourceAddress(10.3.0.20);sourceAddress(10.3.0.24);sourceAddress(10.3.0.28);sourceAddress(10.3.0.32);sourceAddress(10.3.0.36);sourceAddress(10.3.0.40);sourceAddress(10.3.0.44);sourceAddress(10.3.0.48);sourceAddress(10.3.0.52);sourceAddress(10.3.0.56);sourceAddress(10.3.0.60);sourceAddress(10.3.0.64);sourceAddress(10.3.0.68);sourceAddress(10.3.0.72);sourceAddress(10.3.0.76);sourceAddress(10.3.0.80);sourceAddress(10.3.0.84);sourceAddress(10.3.0.88);sourceAddress(10.3.0.92);sourceAddress(10.3.0.96);sourceAddress(10.3.0.100);sourceAddress(10.3.0.104);sourceAddress(10.3.0.108);sourceAddress(10.3.0.112);sourceAddress(10.3.0.116);sourceAddress(10.3.0.120);sourceAddress(10.3.0.124);sourceAddress(10.3.0.128);sourceAddress(10.3.0.132);sourceAddress(10.3.0.136);sourceAddress(10.3.0.140);sourceAddress(10.3.0.144);sourceAddress(10.3.0.148);sourceAddress(10.3.0.152);sourceAddress(10.3.0.156);sourceAddress(10.4.0.0);sourceAddress(10.4.0.4);sourceAddress(10.4.0.8);sourceAddress(10.4.0.12);sourceAddress(10.4.0.16);sourceAddress(10.4.0.20);sourceAddress(10.4.0.24);sourceAddress(10.4.0.28);sourceAddress(10.4.0.32);sourceAddress(10.4.0.36)"
#*.router1.ppp[0].ppp.queue.classifier.packetDataFilters = "destinationAddress(10.0.0.0);destinationAddress(10.0.0.4);destinationAddress(10.0.0.8);destinationAddress(10.0.0.12);destinationAddress(10.0.0.16);destinationAddress(10.0.0.20);destinationAddress(10.0.0.24);destinationAddress(10.0.0.28);destinationAddress(10.0.0.32);destinationAddress(10.0.0.36);destinationAddress(10.0.0.40);destinationAddress(10.0.0.44);destinationAddress(10.0.0.48);destinationAddress(10.0.0.52);destinationAddress(10.0.0.56);destinationAddress(10.0.0.60);destinationAddress(10.0.0.64);destinationAddress(10.0.0.68);destinationAddress(10.0.0.72);destinationAddress(10.0.0.76);destinationAddress(10.0.0.80);destinationAddress(10.0.0.84);destinationAddress(10.0.0.88);destinationAddress(10.0.0.92);destinationAddress(10.0.0.96);destinationAddress(10.0.0.100);destinationAddress(10.0.0.104);destinationAddress(10.0.0.108);destinationAddress(10.0.0.112);destinationAddress(10.0.0.116);destinationAddress(10.0.0.120);destinationAddress(10.0.0.124);destinationAddress(10.0.0.128);destinationAddress(10.0.0.132);destinationAddress(10.0.0.136);destinationAddress(10.0.0.140);destinationAddress(10.0.0.144);destinationAddress(10.0.0.148);destinationAddress(10.0.0.152);destinationAddress(10.0.0.156);destinationAddress(10.0.0.160);destinationAddress(10.0.0.164);destinationAddress(10.0.0.168);destinationAddress(10.0.0.172);destinationAddress(10.0.0.176);destinationAddress(10.0.0.180);destinationAddress(10.0.0.184);destinationAddress(10.0.0.188);destinationAddress(10.0.0.192);destinationAddress(10.0.0.196);destinationAddress(10.0.0.200);destinationAddress(10.0.0.204);destinationAddress(10.0.0.208);destinationAddress(10.0.0.212);destinationAddress(10.0.0.216);destinationAddress(10.0.0.220);destinationAddress(10.0.0.224);destinationAddress(10.1.0.0);destinationAddress(10.1.0.4);destinationAddress(10.1.0.8);destinationAddress(10.1.0.12);destinationAddress(10.1.0.16);destinationAddress(10.1.0.20);destinationAddress(10.1.0.24);destinationAddress(10.1.0.28);destinationAddress(10.1.0.32);destinationAddress(10.1.0.36);destinationAddress(10.1.0.40);destinationAddress(10.1.0.44);destinationAddress(10.1.0.48);destinationAddress(10.1.0.52);destinationAddress(10.1.0.56);destinationAddress(10.1.0.60);destinationAddress(10.1.0.64);destinationAddress(10.1.0.68);destinationAddress(10.1.0.72);destinationAddress(10.1.0.76);destinationAddress(10.1.0.80);destinationAddress(10.1.0.84);destinationAddress(10.1.0.88);destinationAddress(10.1.0.92);destinationAddress(10.1.0.96);destinationAddress(10.1.0.100);destinationAddress(10.2.0.0);destinationAddress(10.2.0.4);destinationAddress(10.2.0.8);destinationAddress(10.2.0.12);destinationAddress(10.2.0.16);destinationAddress(10.2.0.20);destinationAddress(10.2.0.24);destinationAddress(10.3.0.0);destinationAddress(10.3.0.4);destinationAddress(10.3.0.8);destinationAddress(10.3.0.12);destinationAddress(10.3.0.16);destinationAddress(10.3.0.20);destinationAddress(10.3.0.24);destinationAddress(10.3.0.28);destinationAddress(10.3.0.32);destinationAddress(10.3.0.36);destinationAddress(10.3.0.40);destinationAddress(10.3.0.44);destinationAddress(10.3.0.48);destinationAddress(10.3.0.52);destinationAddress(10.3.0.56);destinationAddress(10.3.0.60);destinationAddress(10.3.0.64);destinationAddress(10.3.0.68);destinationAddress(10.3.0.72);destinationAddress(10.3.0.76);destinationAddress(10.3.0.80);destinationAddress(10.3.0.84);destinationAddress(10.3.0.88);destinationAddress(10.3.0.92);destinationAddress(10.3.0.96);destinationAddress(10.3.0.100);destinationAddress(10.3.0.104);destinationAddress(10.3.0.108);destinationAddress(10.3.0.112);destinationAddress(10.3.0.116);destinationAddress(10.3.0.120);destinationAddress(10.3.0.124);destinationAddress(10.3.0.128);destinationAddress(10.3.0.132);destinationAddress(10.3.0.136);destinationAddress(10.3.0.140);destinationAddress(10.3.0.144);destinationAddress(10.3.0.148);destinationAddress(10.3.0.152);destinationAddress(10.3.0.156);destinationAddress(10.4.0.0);destinationAddress(10.4.0.4);destinationAddress(10.4.0.8);destinationAddress(10.4.0.12);destinationAddress(10.4.0.16);destinationAddress(10.4.0.20);destinationAddress(10.4.0.24);destinationAddress(10.4.0.28);destinationAddress(10.4.0.32);destinationAddress(10.4.0.36)"
#
#**.connFIX0.datarate = 100000000bps
#**.connFIX0.delay = 40ms


[Config v1500l13000d68000f17000s500]
description = "Config v1500l13000d68000f17000s500"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/v1500l13000d68000f17000s500routingtest1.xml")
*.nVIP = 35
*.nLVD = 39
*.nVID = 49
*.nFDO = 41
*.nSSH = 31

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 5
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/v1500l13000d68000f17000s500_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.*.*"), expr(ipv4.srcAddress.str() =~ "10.1.*.*"), expr(ipv4.srcAddress.str() =~ "10.2.*.*"), expr(ipv4.srcAddress.str() =~ "10.3.*.*"), expr(ipv4.srcAddress.str() =~ "10.4.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.*.*"), expr(ipv4.destAddress.str() =~ "10.1.*.*"), expr(ipv4.destAddress.str() =~ "10.2.*.*"), expr(ipv4.destAddress.str() =~ "10.3.*.*"), expr(ipv4.destAddress.str() =~ "10.4.*.*")]

**.connFIX0.datarate = 100e6 bps
**.connFIX0.delay = 40ms

[Config v1500l10000d70000f18000s500]
description = "Config v1500l10000d70000f18000s500"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/v1500l10000d70000f18000s500routingtest1.xml")
*.nVIP = 35
*.nLVD = 39
*.nVID = 49
*.nFDO = 41
*.nSSH = 31

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 5
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/v1500l10000d70000f18000s500_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.*.*"), expr(ipv4.srcAddress.str() =~ "10.1.*.*"), expr(ipv4.srcAddress.str() =~ "10.2.*.*"), expr(ipv4.srcAddress.str() =~ "10.3.*.*"), expr(ipv4.srcAddress.str() =~ "10.4.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.*.*"), expr(ipv4.destAddress.str() =~ "10.1.*.*"), expr(ipv4.destAddress.str() =~ "10.2.*.*"), expr(ipv4.destAddress.str() =~ "10.3.*.*"), expr(ipv4.destAddress.str() =~ "10.4.*.*")]

**.connFIX0.datarate = 100e6 bps
**.connFIX0.delay = 40ms



[Config s4_v1500l48000d14000f36000s500]
description = "Config s4_v1500l48000d14000f36000s500"
extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/baseQoS/s4_v1500l48000d14000f36000s500routingtest1.xml")
*.nVIP = 22
*.nLVD = 19
*.nVID = 20
*.nFDO = 18
*.nSSH = 22

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 5
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/s4_v1500l48000d14000f36000s500_htb.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.*.*"), expr(ipv4.srcAddress.str() =~ "10.1.*.*"), expr(ipv4.srcAddress.str() =~ "10.2.*.*"), expr(ipv4.srcAddress.str() =~ "10.3.*.*"), expr(ipv4.srcAddress.str() =~ "10.4.*.*")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.*.*"), expr(ipv4.destAddress.str() =~ "10.1.*.*"), expr(ipv4.destAddress.str() =~ "10.2.*.*"), expr(ipv4.destAddress.str() =~ "10.3.*.*"), expr(ipv4.destAddress.str() =~ "10.4.*.*")]

**.connFIX0.datarate = 100e6 bps
**.connFIX0.delay = 40ms

[Config heatMapTest_VoIP_corrected]
network = baselineTestV3

sim-time-limit=40s

output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed"

*.nVID = 0 # Number of video clients
*.nFDO = 0 # Number of file download clients
*.nSSH = 0 # Number of SSH clients
*.nVIP = 1 # Number of VoIP clients

# VoIP receiver
**.hostVIP[*].numApps = 1
**.hostVIP[*].app[0].typename = "improved5gns.apps.SimpleVoipReceiverCustom"
**.hostVIP[*].app[0].localPort = 2000
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio
**.hostVIP[*].app[0].playoutDelay = 0s # initial delay for beginning playout after receiving the first packet
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet)

# VoIP sender
**.serverVIP.numApps = parent.nVIP
**.serverVIP.app[*].typename = "improved5gns.apps.SimpleVoipSenderCustom"
**.serverVIP.app[*].localPort = -1
**.serverVIP.app[*].destPort = 2000
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]"
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s)
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s)
**.serverVIP.app[*].packetizationInterval = 2ms #20ms # interval between sending voice packets
**.serverVIP.app[*].startTime = 0.01s # time of start sending
**.serverVIP.app[*].stopTime = 10s # time of end of sending, -1 means forever

*.server*.numApps = 0
*.host*.numApps = 0

**.conn1.datarate = ${TP=50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200,210,220,230,240,250,260,270,280,290,300,310,320,330,340,350,360,370,380,390,400,410,420,430,440,450,460,470,480,490,500,510,520,530,540,550}kbps
**.conn1.delay = ${del=0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98}ms



[Config singleAppLSTest_VoIP_corrected]
network = baselineTestV3

sim-time-limit=50s

output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed"

*.nVID = 0 # Number of video clients
*.nFDO = 0 # Number of file download clients
*.nSSH = 0 # Number of SSH clients
*.nVIP = ${numApp=1} # Number of VoIP clients

# VoIP receiver
**.hostVIP[*].numApps = 1
**.hostVIP[*].app[0].typename = "improved5gns.apps.SimpleVoipReceiverCustom"
**.hostVIP[*].app[0].localPort = 2000
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio
**.hostVIP[*].app[0].playoutDelay = 0s # initial delay for beginning playout after receiving the first packet
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet)

# VoIP sender
**.serverVIP.numApps = parent.nVIP
**.serverVIP.app[*].typename = "improved5gns.apps.SimpleVoipSenderCustom"
**.serverVIP.app[*].localPort = -1
**.serverVIP.app[*].destPort = 2000
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]"
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s)
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s)
**.serverVIP.app[*].packetizationInterval = 2ms #20ms # interval between sending voice packets
**.serverVIP.app[*].startTime = 0.01s # time of start sending
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever

*.server*.numApps = 0
*.host*.numApps = 0

**.conn1.datarate = ${TP=50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200,210,220,230,240,250,260,270,280,290,300,310,320,330,340,350,360,370,380,390,400,410,420,430,440,450,460,470,480,490,500,510,520,530,540,550}kbps
**.conn1.delay = ${del=100}ns
 


[Config qoeSlicingTestingBase_R100_Q35_M100_C100]
description = "Configuration for qoeSlicingTestingBase_R100_Q35_M100_C100. All five applications. QoS employed. Guarantee Multiplier: 1.0; Ceil multiplier: 1.0"

extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/routing/qoeSlicingTestingBase_R100_Q35_M100_C100Routing.xml")

*.nVID = 57 # Number of video clients
*.nLVD = 26 # Number of live video client
*.nFDO = 7 # Number of file download clients
*.nSSH = 10 # Number of SSH clients
*.nVIP = 40 # Number of VoIP clients
*.ncVIP = 0 # Number of critical VoIP clients

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 140
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.scheduler.adjustHTBTreeValuesForCorectness = false
*.router*.ppp[0].queue.scheduler.checkHTBTreeValuesForCorectness = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/qoeSlicingTestingBase_R100_Q35_M100_C100HTB.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.0.0"),expr(ipv4.srcAddress.str() =~ "10.0.0.4"),expr(ipv4.srcAddress.str() =~ "10.0.0.8"),expr(ipv4.srcAddress.str() =~ "10.0.0.12"),expr(ipv4.srcAddress.str() =~ "10.0.0.16"),expr(ipv4.srcAddress.str() =~ "10.0.0.20"),expr(ipv4.srcAddress.str() =~ "10.0.0.24"),expr(ipv4.srcAddress.str() =~ "10.0.0.28"),expr(ipv4.srcAddress.str() =~ "10.0.0.32"),expr(ipv4.srcAddress.str() =~ "10.0.0.36"),expr(ipv4.srcAddress.str() =~ "10.0.0.40"),expr(ipv4.srcAddress.str() =~ "10.0.0.44"),expr(ipv4.srcAddress.str() =~ "10.0.0.48"),expr(ipv4.srcAddress.str() =~ "10.0.0.52"),expr(ipv4.srcAddress.str() =~ "10.0.0.56"),expr(ipv4.srcAddress.str() =~ "10.0.0.60"),expr(ipv4.srcAddress.str() =~ "10.0.0.64"),expr(ipv4.srcAddress.str() =~ "10.0.0.68"),expr(ipv4.srcAddress.str() =~ "10.0.0.72"),expr(ipv4.srcAddress.str() =~ "10.0.0.76"),expr(ipv4.srcAddress.str() =~ "10.0.0.80"),expr(ipv4.srcAddress.str() =~ "10.0.0.84"),expr(ipv4.srcAddress.str() =~ "10.0.0.88"),expr(ipv4.srcAddress.str() =~ "10.0.0.92"),expr(ipv4.srcAddress.str() =~ "10.0.0.96"),expr(ipv4.srcAddress.str() =~ "10.0.0.100"),expr(ipv4.srcAddress.str() =~ "10.0.0.104"),expr(ipv4.srcAddress.str() =~ "10.0.0.108"),expr(ipv4.srcAddress.str() =~ "10.0.0.112"),expr(ipv4.srcAddress.str() =~ "10.0.0.116"),expr(ipv4.srcAddress.str() =~ "10.0.0.120"),expr(ipv4.srcAddress.str() =~ "10.0.0.124"),expr(ipv4.srcAddress.str() =~ "10.0.0.128"),expr(ipv4.srcAddress.str() =~ "10.0.0.132"),expr(ipv4.srcAddress.str() =~ "10.0.0.136"),expr(ipv4.srcAddress.str() =~ "10.0.0.140"),expr(ipv4.srcAddress.str() =~ "10.0.0.144"),expr(ipv4.srcAddress.str() =~ "10.0.0.148"),expr(ipv4.srcAddress.str() =~ "10.0.0.152"),expr(ipv4.srcAddress.str() =~ "10.0.0.156"),expr(ipv4.srcAddress.str() =~ "10.0.0.160"),expr(ipv4.srcAddress.str() =~ "10.0.0.164"),expr(ipv4.srcAddress.str() =~ "10.0.0.168"),expr(ipv4.srcAddress.str() =~ "10.0.0.172"),expr(ipv4.srcAddress.str() =~ "10.0.0.176"),expr(ipv4.srcAddress.str() =~ "10.0.0.180"),expr(ipv4.srcAddress.str() =~ "10.0.0.184"),expr(ipv4.srcAddress.str() =~ "10.0.0.188"),expr(ipv4.srcAddress.str() =~ "10.0.0.192"),expr(ipv4.srcAddress.str() =~ "10.0.0.196"),expr(ipv4.srcAddress.str() =~ "10.0.0.200"),expr(ipv4.srcAddress.str() =~ "10.0.0.204"),expr(ipv4.srcAddress.str() =~ "10.0.0.208"),expr(ipv4.srcAddress.str() =~ "10.0.0.212"),expr(ipv4.srcAddress.str() =~ "10.0.0.216"),expr(ipv4.srcAddress.str() =~ "10.0.0.220"),expr(ipv4.srcAddress.str() =~ "10.0.0.224"),expr(ipv4.srcAddress.str() =~ "10.1.0.0"),expr(ipv4.srcAddress.str() =~ "10.1.0.4"),expr(ipv4.srcAddress.str() =~ "10.1.0.8"),expr(ipv4.srcAddress.str() =~ "10.1.0.12"),expr(ipv4.srcAddress.str() =~ "10.1.0.16"),expr(ipv4.srcAddress.str() =~ "10.1.0.20"),expr(ipv4.srcAddress.str() =~ "10.1.0.24"),expr(ipv4.srcAddress.str() =~ "10.1.0.28"),expr(ipv4.srcAddress.str() =~ "10.1.0.32"),expr(ipv4.srcAddress.str() =~ "10.1.0.36"),expr(ipv4.srcAddress.str() =~ "10.1.0.40"),expr(ipv4.srcAddress.str() =~ "10.1.0.44"),expr(ipv4.srcAddress.str() =~ "10.1.0.48"),expr(ipv4.srcAddress.str() =~ "10.1.0.52"),expr(ipv4.srcAddress.str() =~ "10.1.0.56"),expr(ipv4.srcAddress.str() =~ "10.1.0.60"),expr(ipv4.srcAddress.str() =~ "10.1.0.64"),expr(ipv4.srcAddress.str() =~ "10.1.0.68"),expr(ipv4.srcAddress.str() =~ "10.1.0.72"),expr(ipv4.srcAddress.str() =~ "10.1.0.76"),expr(ipv4.srcAddress.str() =~ "10.1.0.80"),expr(ipv4.srcAddress.str() =~ "10.1.0.84"),expr(ipv4.srcAddress.str() =~ "10.1.0.88"),expr(ipv4.srcAddress.str() =~ "10.1.0.92"),expr(ipv4.srcAddress.str() =~ "10.1.0.96"),expr(ipv4.srcAddress.str() =~ "10.1.0.100"),expr(ipv4.srcAddress.str() =~ "10.2.0.0"),expr(ipv4.srcAddress.str() =~ "10.2.0.4"),expr(ipv4.srcAddress.str() =~ "10.2.0.8"),expr(ipv4.srcAddress.str() =~ "10.2.0.12"),expr(ipv4.srcAddress.str() =~ "10.2.0.16"),expr(ipv4.srcAddress.str() =~ "10.2.0.20"),expr(ipv4.srcAddress.str() =~ "10.2.0.24"),expr(ipv4.srcAddress.str() =~ "10.3.0.0"),expr(ipv4.srcAddress.str() =~ "10.3.0.4"),expr(ipv4.srcAddress.str() =~ "10.3.0.8"),expr(ipv4.srcAddress.str() =~ "10.3.0.12"),expr(ipv4.srcAddress.str() =~ "10.3.0.16"),expr(ipv4.srcAddress.str() =~ "10.3.0.20"),expr(ipv4.srcAddress.str() =~ "10.3.0.24"),expr(ipv4.srcAddress.str() =~ "10.3.0.28"),expr(ipv4.srcAddress.str() =~ "10.3.0.32"),expr(ipv4.srcAddress.str() =~ "10.3.0.36"),expr(ipv4.srcAddress.str() =~ "10.3.0.40"),expr(ipv4.srcAddress.str() =~ "10.3.0.44"),expr(ipv4.srcAddress.str() =~ "10.3.0.48"),expr(ipv4.srcAddress.str() =~ "10.3.0.52"),expr(ipv4.srcAddress.str() =~ "10.3.0.56"),expr(ipv4.srcAddress.str() =~ "10.3.0.60"),expr(ipv4.srcAddress.str() =~ "10.3.0.64"),expr(ipv4.srcAddress.str() =~ "10.3.0.68"),expr(ipv4.srcAddress.str() =~ "10.3.0.72"),expr(ipv4.srcAddress.str() =~ "10.3.0.76"),expr(ipv4.srcAddress.str() =~ "10.3.0.80"),expr(ipv4.srcAddress.str() =~ "10.3.0.84"),expr(ipv4.srcAddress.str() =~ "10.3.0.88"),expr(ipv4.srcAddress.str() =~ "10.3.0.92"),expr(ipv4.srcAddress.str() =~ "10.3.0.96"),expr(ipv4.srcAddress.str() =~ "10.3.0.100"),expr(ipv4.srcAddress.str() =~ "10.3.0.104"),expr(ipv4.srcAddress.str() =~ "10.3.0.108"),expr(ipv4.srcAddress.str() =~ "10.3.0.112"),expr(ipv4.srcAddress.str() =~ "10.3.0.116"),expr(ipv4.srcAddress.str() =~ "10.3.0.120"),expr(ipv4.srcAddress.str() =~ "10.3.0.124"),expr(ipv4.srcAddress.str() =~ "10.3.0.128"),expr(ipv4.srcAddress.str() =~ "10.3.0.132"),expr(ipv4.srcAddress.str() =~ "10.3.0.136"),expr(ipv4.srcAddress.str() =~ "10.3.0.140"),expr(ipv4.srcAddress.str() =~ "10.3.0.144"),expr(ipv4.srcAddress.str() =~ "10.3.0.148"),expr(ipv4.srcAddress.str() =~ "10.3.0.152"),expr(ipv4.srcAddress.str() =~ "10.3.0.156"),expr(ipv4.srcAddress.str() =~ "10.4.0.0"),expr(ipv4.srcAddress.str() =~ "10.4.0.4"),expr(ipv4.srcAddress.str() =~ "10.4.0.8"),expr(ipv4.srcAddress.str() =~ "10.4.0.12"),expr(ipv4.srcAddress.str() =~ "10.4.0.16"),expr(ipv4.srcAddress.str() =~ "10.4.0.20"),expr(ipv4.srcAddress.str() =~ "10.4.0.24"),expr(ipv4.srcAddress.str() =~ "10.4.0.28"),expr(ipv4.srcAddress.str() =~ "10.4.0.32"),expr(ipv4.srcAddress.str() =~ "10.4.0.36")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.0.0"),expr(ipv4.destAddress.str() =~ "10.0.0.4"),expr(ipv4.destAddress.str() =~ "10.0.0.8"),expr(ipv4.destAddress.str() =~ "10.0.0.12"),expr(ipv4.destAddress.str() =~ "10.0.0.16"),expr(ipv4.destAddress.str() =~ "10.0.0.20"),expr(ipv4.destAddress.str() =~ "10.0.0.24"),expr(ipv4.destAddress.str() =~ "10.0.0.28"),expr(ipv4.destAddress.str() =~ "10.0.0.32"),expr(ipv4.destAddress.str() =~ "10.0.0.36"),expr(ipv4.destAddress.str() =~ "10.0.0.40"),expr(ipv4.destAddress.str() =~ "10.0.0.44"),expr(ipv4.destAddress.str() =~ "10.0.0.48"),expr(ipv4.destAddress.str() =~ "10.0.0.52"),expr(ipv4.destAddress.str() =~ "10.0.0.56"),expr(ipv4.destAddress.str() =~ "10.0.0.60"),expr(ipv4.destAddress.str() =~ "10.0.0.64"),expr(ipv4.destAddress.str() =~ "10.0.0.68"),expr(ipv4.destAddress.str() =~ "10.0.0.72"),expr(ipv4.destAddress.str() =~ "10.0.0.76"),expr(ipv4.destAddress.str() =~ "10.0.0.80"),expr(ipv4.destAddress.str() =~ "10.0.0.84"),expr(ipv4.destAddress.str() =~ "10.0.0.88"),expr(ipv4.destAddress.str() =~ "10.0.0.92"),expr(ipv4.destAddress.str() =~ "10.0.0.96"),expr(ipv4.destAddress.str() =~ "10.0.0.100"),expr(ipv4.destAddress.str() =~ "10.0.0.104"),expr(ipv4.destAddress.str() =~ "10.0.0.108"),expr(ipv4.destAddress.str() =~ "10.0.0.112"),expr(ipv4.destAddress.str() =~ "10.0.0.116"),expr(ipv4.destAddress.str() =~ "10.0.0.120"),expr(ipv4.destAddress.str() =~ "10.0.0.124"),expr(ipv4.destAddress.str() =~ "10.0.0.128"),expr(ipv4.destAddress.str() =~ "10.0.0.132"),expr(ipv4.destAddress.str() =~ "10.0.0.136"),expr(ipv4.destAddress.str() =~ "10.0.0.140"),expr(ipv4.destAddress.str() =~ "10.0.0.144"),expr(ipv4.destAddress.str() =~ "10.0.0.148"),expr(ipv4.destAddress.str() =~ "10.0.0.152"),expr(ipv4.destAddress.str() =~ "10.0.0.156"),expr(ipv4.destAddress.str() =~ "10.0.0.160"),expr(ipv4.destAddress.str() =~ "10.0.0.164"),expr(ipv4.destAddress.str() =~ "10.0.0.168"),expr(ipv4.destAddress.str() =~ "10.0.0.172"),expr(ipv4.destAddress.str() =~ "10.0.0.176"),expr(ipv4.destAddress.str() =~ "10.0.0.180"),expr(ipv4.destAddress.str() =~ "10.0.0.184"),expr(ipv4.destAddress.str() =~ "10.0.0.188"),expr(ipv4.destAddress.str() =~ "10.0.0.192"),expr(ipv4.destAddress.str() =~ "10.0.0.196"),expr(ipv4.destAddress.str() =~ "10.0.0.200"),expr(ipv4.destAddress.str() =~ "10.0.0.204"),expr(ipv4.destAddress.str() =~ "10.0.0.208"),expr(ipv4.destAddress.str() =~ "10.0.0.212"),expr(ipv4.destAddress.str() =~ "10.0.0.216"),expr(ipv4.destAddress.str() =~ "10.0.0.220"),expr(ipv4.destAddress.str() =~ "10.0.0.224"),expr(ipv4.destAddress.str() =~ "10.1.0.0"),expr(ipv4.destAddress.str() =~ "10.1.0.4"),expr(ipv4.destAddress.str() =~ "10.1.0.8"),expr(ipv4.destAddress.str() =~ "10.1.0.12"),expr(ipv4.destAddress.str() =~ "10.1.0.16"),expr(ipv4.destAddress.str() =~ "10.1.0.20"),expr(ipv4.destAddress.str() =~ "10.1.0.24"),expr(ipv4.destAddress.str() =~ "10.1.0.28"),expr(ipv4.destAddress.str() =~ "10.1.0.32"),expr(ipv4.destAddress.str() =~ "10.1.0.36"),expr(ipv4.destAddress.str() =~ "10.1.0.40"),expr(ipv4.destAddress.str() =~ "10.1.0.44"),expr(ipv4.destAddress.str() =~ "10.1.0.48"),expr(ipv4.destAddress.str() =~ "10.1.0.52"),expr(ipv4.destAddress.str() =~ "10.1.0.56"),expr(ipv4.destAddress.str() =~ "10.1.0.60"),expr(ipv4.destAddress.str() =~ "10.1.0.64"),expr(ipv4.destAddress.str() =~ "10.1.0.68"),expr(ipv4.destAddress.str() =~ "10.1.0.72"),expr(ipv4.destAddress.str() =~ "10.1.0.76"),expr(ipv4.destAddress.str() =~ "10.1.0.80"),expr(ipv4.destAddress.str() =~ "10.1.0.84"),expr(ipv4.destAddress.str() =~ "10.1.0.88"),expr(ipv4.destAddress.str() =~ "10.1.0.92"),expr(ipv4.destAddress.str() =~ "10.1.0.96"),expr(ipv4.destAddress.str() =~ "10.1.0.100"),expr(ipv4.destAddress.str() =~ "10.2.0.0"),expr(ipv4.destAddress.str() =~ "10.2.0.4"),expr(ipv4.destAddress.str() =~ "10.2.0.8"),expr(ipv4.destAddress.str() =~ "10.2.0.12"),expr(ipv4.destAddress.str() =~ "10.2.0.16"),expr(ipv4.destAddress.str() =~ "10.2.0.20"),expr(ipv4.destAddress.str() =~ "10.2.0.24"),expr(ipv4.destAddress.str() =~ "10.3.0.0"),expr(ipv4.destAddress.str() =~ "10.3.0.4"),expr(ipv4.destAddress.str() =~ "10.3.0.8"),expr(ipv4.destAddress.str() =~ "10.3.0.12"),expr(ipv4.destAddress.str() =~ "10.3.0.16"),expr(ipv4.destAddress.str() =~ "10.3.0.20"),expr(ipv4.destAddress.str() =~ "10.3.0.24"),expr(ipv4.destAddress.str() =~ "10.3.0.28"),expr(ipv4.destAddress.str() =~ "10.3.0.32"),expr(ipv4.destAddress.str() =~ "10.3.0.36"),expr(ipv4.destAddress.str() =~ "10.3.0.40"),expr(ipv4.destAddress.str() =~ "10.3.0.44"),expr(ipv4.destAddress.str() =~ "10.3.0.48"),expr(ipv4.destAddress.str() =~ "10.3.0.52"),expr(ipv4.destAddress.str() =~ "10.3.0.56"),expr(ipv4.destAddress.str() =~ "10.3.0.60"),expr(ipv4.destAddress.str() =~ "10.3.0.64"),expr(ipv4.destAddress.str() =~ "10.3.0.68"),expr(ipv4.destAddress.str() =~ "10.3.0.72"),expr(ipv4.destAddress.str() =~ "10.3.0.76"),expr(ipv4.destAddress.str() =~ "10.3.0.80"),expr(ipv4.destAddress.str() =~ "10.3.0.84"),expr(ipv4.destAddress.str() =~ "10.3.0.88"),expr(ipv4.destAddress.str() =~ "10.3.0.92"),expr(ipv4.destAddress.str() =~ "10.3.0.96"),expr(ipv4.destAddress.str() =~ "10.3.0.100"),expr(ipv4.destAddress.str() =~ "10.3.0.104"),expr(ipv4.destAddress.str() =~ "10.3.0.108"),expr(ipv4.destAddress.str() =~ "10.3.0.112"),expr(ipv4.destAddress.str() =~ "10.3.0.116"),expr(ipv4.destAddress.str() =~ "10.3.0.120"),expr(ipv4.destAddress.str() =~ "10.3.0.124"),expr(ipv4.destAddress.str() =~ "10.3.0.128"),expr(ipv4.destAddress.str() =~ "10.3.0.132"),expr(ipv4.destAddress.str() =~ "10.3.0.136"),expr(ipv4.destAddress.str() =~ "10.3.0.140"),expr(ipv4.destAddress.str() =~ "10.3.0.144"),expr(ipv4.destAddress.str() =~ "10.3.0.148"),expr(ipv4.destAddress.str() =~ "10.3.0.152"),expr(ipv4.destAddress.str() =~ "10.3.0.156"),expr(ipv4.destAddress.str() =~ "10.4.0.0"),expr(ipv4.destAddress.str() =~ "10.4.0.4"),expr(ipv4.destAddress.str() =~ "10.4.0.8"),expr(ipv4.destAddress.str() =~ "10.4.0.12"),expr(ipv4.destAddress.str() =~ "10.4.0.16"),expr(ipv4.destAddress.str() =~ "10.4.0.20"),expr(ipv4.destAddress.str() =~ "10.4.0.24"),expr(ipv4.destAddress.str() =~ "10.4.0.28"),expr(ipv4.destAddress.str() =~ "10.4.0.32"),expr(ipv4.destAddress.str() =~ "10.4.0.36")]

**.connFIX0.datarate = 100000000bps
**.connFIX0.delay = 40ms


[Config criticalVoIPtest2SlicesHTB_R100_Q35_M100_C100]
description = "Configuration for criticalVoIPtest2SlicesHTB_R100_Q35_M100_C100. All five applications. QoS employed. Guarantee Multiplier: 1.0; Ceil multiplier: 1.0"

extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/routing/criticalVoIPtest2SlicesHTB_R100_Q35_M100_C100Routing.xml")

*.nVID = 54 # Number of video clients
*.nLVD = 26 # Number of live video client
*.nFDO = 7 # Number of file download clients
*.nSSH = 10 # Number of SSH clients
*.nVIP = 25 # Number of VoIP clients
*.ncVIP = 13 # Number of critical VoIP clients

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 135
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.scheduler.adjustHTBTreeValuesForCorectness = false
*.router*.ppp[0].queue.scheduler.checkHTBTreeValuesForCorectness = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/criticalVoIPtest2SlicesHTB_R100_Q35_M100_C100HTB.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.0.0"),expr(ipv4.srcAddress.str() =~ "10.0.0.4"),expr(ipv4.srcAddress.str() =~ "10.0.0.8"),expr(ipv4.srcAddress.str() =~ "10.0.0.12"),expr(ipv4.srcAddress.str() =~ "10.0.0.16"),expr(ipv4.srcAddress.str() =~ "10.0.0.20"),expr(ipv4.srcAddress.str() =~ "10.0.0.24"),expr(ipv4.srcAddress.str() =~ "10.0.0.28"),expr(ipv4.srcAddress.str() =~ "10.0.0.32"),expr(ipv4.srcAddress.str() =~ "10.0.0.36"),expr(ipv4.srcAddress.str() =~ "10.0.0.40"),expr(ipv4.srcAddress.str() =~ "10.0.0.44"),expr(ipv4.srcAddress.str() =~ "10.0.0.48"),expr(ipv4.srcAddress.str() =~ "10.0.0.52"),expr(ipv4.srcAddress.str() =~ "10.0.0.56"),expr(ipv4.srcAddress.str() =~ "10.0.0.60"),expr(ipv4.srcAddress.str() =~ "10.0.0.64"),expr(ipv4.srcAddress.str() =~ "10.0.0.68"),expr(ipv4.srcAddress.str() =~ "10.0.0.72"),expr(ipv4.srcAddress.str() =~ "10.0.0.76"),expr(ipv4.srcAddress.str() =~ "10.0.0.80"),expr(ipv4.srcAddress.str() =~ "10.0.0.84"),expr(ipv4.srcAddress.str() =~ "10.0.0.88"),expr(ipv4.srcAddress.str() =~ "10.0.0.92"),expr(ipv4.srcAddress.str() =~ "10.0.0.96"),expr(ipv4.srcAddress.str() =~ "10.0.0.100"),expr(ipv4.srcAddress.str() =~ "10.0.0.104"),expr(ipv4.srcAddress.str() =~ "10.0.0.108"),expr(ipv4.srcAddress.str() =~ "10.0.0.112"),expr(ipv4.srcAddress.str() =~ "10.0.0.116"),expr(ipv4.srcAddress.str() =~ "10.0.0.120"),expr(ipv4.srcAddress.str() =~ "10.0.0.124"),expr(ipv4.srcAddress.str() =~ "10.0.0.128"),expr(ipv4.srcAddress.str() =~ "10.0.0.132"),expr(ipv4.srcAddress.str() =~ "10.0.0.136"),expr(ipv4.srcAddress.str() =~ "10.0.0.140"),expr(ipv4.srcAddress.str() =~ "10.0.0.144"),expr(ipv4.srcAddress.str() =~ "10.0.0.148"),expr(ipv4.srcAddress.str() =~ "10.0.0.152"),expr(ipv4.srcAddress.str() =~ "10.0.0.156"),expr(ipv4.srcAddress.str() =~ "10.0.0.160"),expr(ipv4.srcAddress.str() =~ "10.0.0.164"),expr(ipv4.srcAddress.str() =~ "10.0.0.168"),expr(ipv4.srcAddress.str() =~ "10.0.0.172"),expr(ipv4.srcAddress.str() =~ "10.0.0.176"),expr(ipv4.srcAddress.str() =~ "10.0.0.180"),expr(ipv4.srcAddress.str() =~ "10.0.0.184"),expr(ipv4.srcAddress.str() =~ "10.0.0.188"),expr(ipv4.srcAddress.str() =~ "10.0.0.192"),expr(ipv4.srcAddress.str() =~ "10.0.0.196"),expr(ipv4.srcAddress.str() =~ "10.0.0.200"),expr(ipv4.srcAddress.str() =~ "10.0.0.204"),expr(ipv4.srcAddress.str() =~ "10.0.0.208"),expr(ipv4.srcAddress.str() =~ "10.0.0.212"),expr(ipv4.srcAddress.str() =~ "10.1.0.0"),expr(ipv4.srcAddress.str() =~ "10.1.0.4"),expr(ipv4.srcAddress.str() =~ "10.1.0.8"),expr(ipv4.srcAddress.str() =~ "10.1.0.12"),expr(ipv4.srcAddress.str() =~ "10.1.0.16"),expr(ipv4.srcAddress.str() =~ "10.1.0.20"),expr(ipv4.srcAddress.str() =~ "10.1.0.24"),expr(ipv4.srcAddress.str() =~ "10.1.0.28"),expr(ipv4.srcAddress.str() =~ "10.1.0.32"),expr(ipv4.srcAddress.str() =~ "10.1.0.36"),expr(ipv4.srcAddress.str() =~ "10.1.0.40"),expr(ipv4.srcAddress.str() =~ "10.1.0.44"),expr(ipv4.srcAddress.str() =~ "10.1.0.48"),expr(ipv4.srcAddress.str() =~ "10.1.0.52"),expr(ipv4.srcAddress.str() =~ "10.1.0.56"),expr(ipv4.srcAddress.str() =~ "10.1.0.60"),expr(ipv4.srcAddress.str() =~ "10.1.0.64"),expr(ipv4.srcAddress.str() =~ "10.1.0.68"),expr(ipv4.srcAddress.str() =~ "10.1.0.72"),expr(ipv4.srcAddress.str() =~ "10.1.0.76"),expr(ipv4.srcAddress.str() =~ "10.1.0.80"),expr(ipv4.srcAddress.str() =~ "10.1.0.84"),expr(ipv4.srcAddress.str() =~ "10.1.0.88"),expr(ipv4.srcAddress.str() =~ "10.1.0.92"),expr(ipv4.srcAddress.str() =~ "10.1.0.96"),expr(ipv4.srcAddress.str() =~ "10.1.0.100"),expr(ipv4.srcAddress.str() =~ "10.2.0.0"),expr(ipv4.srcAddress.str() =~ "10.2.0.4"),expr(ipv4.srcAddress.str() =~ "10.2.0.8"),expr(ipv4.srcAddress.str() =~ "10.2.0.12"),expr(ipv4.srcAddress.str() =~ "10.2.0.16"),expr(ipv4.srcAddress.str() =~ "10.2.0.20"),expr(ipv4.srcAddress.str() =~ "10.2.0.24"),expr(ipv4.srcAddress.str() =~ "10.3.0.0"),expr(ipv4.srcAddress.str() =~ "10.3.0.4"),expr(ipv4.srcAddress.str() =~ "10.3.0.8"),expr(ipv4.srcAddress.str() =~ "10.3.0.12"),expr(ipv4.srcAddress.str() =~ "10.3.0.16"),expr(ipv4.srcAddress.str() =~ "10.3.0.20"),expr(ipv4.srcAddress.str() =~ "10.3.0.24"),expr(ipv4.srcAddress.str() =~ "10.3.0.28"),expr(ipv4.srcAddress.str() =~ "10.3.0.32"),expr(ipv4.srcAddress.str() =~ "10.3.0.36"),expr(ipv4.srcAddress.str() =~ "10.3.0.40"),expr(ipv4.srcAddress.str() =~ "10.3.0.44"),expr(ipv4.srcAddress.str() =~ "10.3.0.48"),expr(ipv4.srcAddress.str() =~ "10.3.0.52"),expr(ipv4.srcAddress.str() =~ "10.3.0.56"),expr(ipv4.srcAddress.str() =~ "10.3.0.60"),expr(ipv4.srcAddress.str() =~ "10.3.0.64"),expr(ipv4.srcAddress.str() =~ "10.3.0.68"),expr(ipv4.srcAddress.str() =~ "10.3.0.72"),expr(ipv4.srcAddress.str() =~ "10.3.0.76"),expr(ipv4.srcAddress.str() =~ "10.3.0.80"),expr(ipv4.srcAddress.str() =~ "10.3.0.84"),expr(ipv4.srcAddress.str() =~ "10.3.0.88"),expr(ipv4.srcAddress.str() =~ "10.3.0.92"),expr(ipv4.srcAddress.str() =~ "10.3.0.96"),expr(ipv4.srcAddress.str() =~ "10.4.0.0"),expr(ipv4.srcAddress.str() =~ "10.4.0.4"),expr(ipv4.srcAddress.str() =~ "10.4.0.8"),expr(ipv4.srcAddress.str() =~ "10.4.0.12"),expr(ipv4.srcAddress.str() =~ "10.4.0.16"),expr(ipv4.srcAddress.str() =~ "10.4.0.20"),expr(ipv4.srcAddress.str() =~ "10.4.0.24"),expr(ipv4.srcAddress.str() =~ "10.4.0.28"),expr(ipv4.srcAddress.str() =~ "10.4.0.32"),expr(ipv4.srcAddress.str() =~ "10.4.0.36"),expr(ipv4.srcAddress.str() =~ "10.5.0.0"),expr(ipv4.srcAddress.str() =~ "10.5.0.4"),expr(ipv4.srcAddress.str() =~ "10.5.0.8"),expr(ipv4.srcAddress.str() =~ "10.5.0.12"),expr(ipv4.srcAddress.str() =~ "10.5.0.16"),expr(ipv4.srcAddress.str() =~ "10.5.0.20"),expr(ipv4.srcAddress.str() =~ "10.5.0.24"),expr(ipv4.srcAddress.str() =~ "10.5.0.28"),expr(ipv4.srcAddress.str() =~ "10.5.0.32"),expr(ipv4.srcAddress.str() =~ "10.5.0.36"),expr(ipv4.srcAddress.str() =~ "10.5.0.40"),expr(ipv4.srcAddress.str() =~ "10.5.0.44"),expr(ipv4.srcAddress.str() =~ "10.5.0.48")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.0.0"),expr(ipv4.destAddress.str() =~ "10.0.0.4"),expr(ipv4.destAddress.str() =~ "10.0.0.8"),expr(ipv4.destAddress.str() =~ "10.0.0.12"),expr(ipv4.destAddress.str() =~ "10.0.0.16"),expr(ipv4.destAddress.str() =~ "10.0.0.20"),expr(ipv4.destAddress.str() =~ "10.0.0.24"),expr(ipv4.destAddress.str() =~ "10.0.0.28"),expr(ipv4.destAddress.str() =~ "10.0.0.32"),expr(ipv4.destAddress.str() =~ "10.0.0.36"),expr(ipv4.destAddress.str() =~ "10.0.0.40"),expr(ipv4.destAddress.str() =~ "10.0.0.44"),expr(ipv4.destAddress.str() =~ "10.0.0.48"),expr(ipv4.destAddress.str() =~ "10.0.0.52"),expr(ipv4.destAddress.str() =~ "10.0.0.56"),expr(ipv4.destAddress.str() =~ "10.0.0.60"),expr(ipv4.destAddress.str() =~ "10.0.0.64"),expr(ipv4.destAddress.str() =~ "10.0.0.68"),expr(ipv4.destAddress.str() =~ "10.0.0.72"),expr(ipv4.destAddress.str() =~ "10.0.0.76"),expr(ipv4.destAddress.str() =~ "10.0.0.80"),expr(ipv4.destAddress.str() =~ "10.0.0.84"),expr(ipv4.destAddress.str() =~ "10.0.0.88"),expr(ipv4.destAddress.str() =~ "10.0.0.92"),expr(ipv4.destAddress.str() =~ "10.0.0.96"),expr(ipv4.destAddress.str() =~ "10.0.0.100"),expr(ipv4.destAddress.str() =~ "10.0.0.104"),expr(ipv4.destAddress.str() =~ "10.0.0.108"),expr(ipv4.destAddress.str() =~ "10.0.0.112"),expr(ipv4.destAddress.str() =~ "10.0.0.116"),expr(ipv4.destAddress.str() =~ "10.0.0.120"),expr(ipv4.destAddress.str() =~ "10.0.0.124"),expr(ipv4.destAddress.str() =~ "10.0.0.128"),expr(ipv4.destAddress.str() =~ "10.0.0.132"),expr(ipv4.destAddress.str() =~ "10.0.0.136"),expr(ipv4.destAddress.str() =~ "10.0.0.140"),expr(ipv4.destAddress.str() =~ "10.0.0.144"),expr(ipv4.destAddress.str() =~ "10.0.0.148"),expr(ipv4.destAddress.str() =~ "10.0.0.152"),expr(ipv4.destAddress.str() =~ "10.0.0.156"),expr(ipv4.destAddress.str() =~ "10.0.0.160"),expr(ipv4.destAddress.str() =~ "10.0.0.164"),expr(ipv4.destAddress.str() =~ "10.0.0.168"),expr(ipv4.destAddress.str() =~ "10.0.0.172"),expr(ipv4.destAddress.str() =~ "10.0.0.176"),expr(ipv4.destAddress.str() =~ "10.0.0.180"),expr(ipv4.destAddress.str() =~ "10.0.0.184"),expr(ipv4.destAddress.str() =~ "10.0.0.188"),expr(ipv4.destAddress.str() =~ "10.0.0.192"),expr(ipv4.destAddress.str() =~ "10.0.0.196"),expr(ipv4.destAddress.str() =~ "10.0.0.200"),expr(ipv4.destAddress.str() =~ "10.0.0.204"),expr(ipv4.destAddress.str() =~ "10.0.0.208"),expr(ipv4.destAddress.str() =~ "10.0.0.212"),expr(ipv4.destAddress.str() =~ "10.1.0.0"),expr(ipv4.destAddress.str() =~ "10.1.0.4"),expr(ipv4.destAddress.str() =~ "10.1.0.8"),expr(ipv4.destAddress.str() =~ "10.1.0.12"),expr(ipv4.destAddress.str() =~ "10.1.0.16"),expr(ipv4.destAddress.str() =~ "10.1.0.20"),expr(ipv4.destAddress.str() =~ "10.1.0.24"),expr(ipv4.destAddress.str() =~ "10.1.0.28"),expr(ipv4.destAddress.str() =~ "10.1.0.32"),expr(ipv4.destAddress.str() =~ "10.1.0.36"),expr(ipv4.destAddress.str() =~ "10.1.0.40"),expr(ipv4.destAddress.str() =~ "10.1.0.44"),expr(ipv4.destAddress.str() =~ "10.1.0.48"),expr(ipv4.destAddress.str() =~ "10.1.0.52"),expr(ipv4.destAddress.str() =~ "10.1.0.56"),expr(ipv4.destAddress.str() =~ "10.1.0.60"),expr(ipv4.destAddress.str() =~ "10.1.0.64"),expr(ipv4.destAddress.str() =~ "10.1.0.68"),expr(ipv4.destAddress.str() =~ "10.1.0.72"),expr(ipv4.destAddress.str() =~ "10.1.0.76"),expr(ipv4.destAddress.str() =~ "10.1.0.80"),expr(ipv4.destAddress.str() =~ "10.1.0.84"),expr(ipv4.destAddress.str() =~ "10.1.0.88"),expr(ipv4.destAddress.str() =~ "10.1.0.92"),expr(ipv4.destAddress.str() =~ "10.1.0.96"),expr(ipv4.destAddress.str() =~ "10.1.0.100"),expr(ipv4.destAddress.str() =~ "10.2.0.0"),expr(ipv4.destAddress.str() =~ "10.2.0.4"),expr(ipv4.destAddress.str() =~ "10.2.0.8"),expr(ipv4.destAddress.str() =~ "10.2.0.12"),expr(ipv4.destAddress.str() =~ "10.2.0.16"),expr(ipv4.destAddress.str() =~ "10.2.0.20"),expr(ipv4.destAddress.str() =~ "10.2.0.24"),expr(ipv4.destAddress.str() =~ "10.3.0.0"),expr(ipv4.destAddress.str() =~ "10.3.0.4"),expr(ipv4.destAddress.str() =~ "10.3.0.8"),expr(ipv4.destAddress.str() =~ "10.3.0.12"),expr(ipv4.destAddress.str() =~ "10.3.0.16"),expr(ipv4.destAddress.str() =~ "10.3.0.20"),expr(ipv4.destAddress.str() =~ "10.3.0.24"),expr(ipv4.destAddress.str() =~ "10.3.0.28"),expr(ipv4.destAddress.str() =~ "10.3.0.32"),expr(ipv4.destAddress.str() =~ "10.3.0.36"),expr(ipv4.destAddress.str() =~ "10.3.0.40"),expr(ipv4.destAddress.str() =~ "10.3.0.44"),expr(ipv4.destAddress.str() =~ "10.3.0.48"),expr(ipv4.destAddress.str() =~ "10.3.0.52"),expr(ipv4.destAddress.str() =~ "10.3.0.56"),expr(ipv4.destAddress.str() =~ "10.3.0.60"),expr(ipv4.destAddress.str() =~ "10.3.0.64"),expr(ipv4.destAddress.str() =~ "10.3.0.68"),expr(ipv4.destAddress.str() =~ "10.3.0.72"),expr(ipv4.destAddress.str() =~ "10.3.0.76"),expr(ipv4.destAddress.str() =~ "10.3.0.80"),expr(ipv4.destAddress.str() =~ "10.3.0.84"),expr(ipv4.destAddress.str() =~ "10.3.0.88"),expr(ipv4.destAddress.str() =~ "10.3.0.92"),expr(ipv4.destAddress.str() =~ "10.3.0.96"),expr(ipv4.destAddress.str() =~ "10.4.0.0"),expr(ipv4.destAddress.str() =~ "10.4.0.4"),expr(ipv4.destAddress.str() =~ "10.4.0.8"),expr(ipv4.destAddress.str() =~ "10.4.0.12"),expr(ipv4.destAddress.str() =~ "10.4.0.16"),expr(ipv4.destAddress.str() =~ "10.4.0.20"),expr(ipv4.destAddress.str() =~ "10.4.0.24"),expr(ipv4.destAddress.str() =~ "10.4.0.28"),expr(ipv4.destAddress.str() =~ "10.4.0.32"),expr(ipv4.destAddress.str() =~ "10.4.0.36"),expr(ipv4.destAddress.str() =~ "10.5.0.0"),expr(ipv4.destAddress.str() =~ "10.5.0.4"),expr(ipv4.destAddress.str() =~ "10.5.0.8"),expr(ipv4.destAddress.str() =~ "10.5.0.12"),expr(ipv4.destAddress.str() =~ "10.5.0.16"),expr(ipv4.destAddress.str() =~ "10.5.0.20"),expr(ipv4.destAddress.str() =~ "10.5.0.24"),expr(ipv4.destAddress.str() =~ "10.5.0.28"),expr(ipv4.destAddress.str() =~ "10.5.0.32"),expr(ipv4.destAddress.str() =~ "10.5.0.36"),expr(ipv4.destAddress.str() =~ "10.5.0.40"),expr(ipv4.destAddress.str() =~ "10.5.0.44"),expr(ipv4.destAddress.str() =~ "10.5.0.48")]

**.connFIX0.datarate = 100000000bps
**.connFIX0.delay = 40ms



[Config criticalVoIPtest22SlicesHTB_R100_Q35_M100_C100]
description = "Configuration for criticalVoIPtest22SlicesHTB_R100_Q35_M100_C100. All five applications. QoS employed. Guarantee Multiplier: 1.0; Ceil multiplier: 1.0"

extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/routing/criticalVoIPtest22SlicesHTB_R100_Q35_M100_C100Routing.xml")

*.nVID = 54 # Number of video clients
*.nLVD = 26 # Number of live video client
*.nFDO = 7 # Number of file download clients
*.nSSH = 7 # Number of SSH clients
*.nVIP = 18 # Number of VoIP clients
*.ncVIP = 11 # Number of critical VoIP clients

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 123
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.scheduler.adjustHTBTreeValuesForCorectness = false
*.router*.ppp[0].queue.scheduler.checkHTBTreeValuesForCorectness = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/criticalVoIPtest22SlicesHTB_R100_Q35_M100_C100HTB.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.0.0"),expr(ipv4.srcAddress.str() =~ "10.0.0.4"),expr(ipv4.srcAddress.str() =~ "10.0.0.8"),expr(ipv4.srcAddress.str() =~ "10.0.0.12"),expr(ipv4.srcAddress.str() =~ "10.0.0.16"),expr(ipv4.srcAddress.str() =~ "10.0.0.20"),expr(ipv4.srcAddress.str() =~ "10.0.0.24"),expr(ipv4.srcAddress.str() =~ "10.0.0.28"),expr(ipv4.srcAddress.str() =~ "10.0.0.32"),expr(ipv4.srcAddress.str() =~ "10.0.0.36"),expr(ipv4.srcAddress.str() =~ "10.0.0.40"),expr(ipv4.srcAddress.str() =~ "10.0.0.44"),expr(ipv4.srcAddress.str() =~ "10.0.0.48"),expr(ipv4.srcAddress.str() =~ "10.0.0.52"),expr(ipv4.srcAddress.str() =~ "10.0.0.56"),expr(ipv4.srcAddress.str() =~ "10.0.0.60"),expr(ipv4.srcAddress.str() =~ "10.0.0.64"),expr(ipv4.srcAddress.str() =~ "10.0.0.68"),expr(ipv4.srcAddress.str() =~ "10.0.0.72"),expr(ipv4.srcAddress.str() =~ "10.0.0.76"),expr(ipv4.srcAddress.str() =~ "10.0.0.80"),expr(ipv4.srcAddress.str() =~ "10.0.0.84"),expr(ipv4.srcAddress.str() =~ "10.0.0.88"),expr(ipv4.srcAddress.str() =~ "10.0.0.92"),expr(ipv4.srcAddress.str() =~ "10.0.0.96"),expr(ipv4.srcAddress.str() =~ "10.0.0.100"),expr(ipv4.srcAddress.str() =~ "10.0.0.104"),expr(ipv4.srcAddress.str() =~ "10.0.0.108"),expr(ipv4.srcAddress.str() =~ "10.0.0.112"),expr(ipv4.srcAddress.str() =~ "10.0.0.116"),expr(ipv4.srcAddress.str() =~ "10.0.0.120"),expr(ipv4.srcAddress.str() =~ "10.0.0.124"),expr(ipv4.srcAddress.str() =~ "10.0.0.128"),expr(ipv4.srcAddress.str() =~ "10.0.0.132"),expr(ipv4.srcAddress.str() =~ "10.0.0.136"),expr(ipv4.srcAddress.str() =~ "10.0.0.140"),expr(ipv4.srcAddress.str() =~ "10.0.0.144"),expr(ipv4.srcAddress.str() =~ "10.0.0.148"),expr(ipv4.srcAddress.str() =~ "10.0.0.152"),expr(ipv4.srcAddress.str() =~ "10.0.0.156"),expr(ipv4.srcAddress.str() =~ "10.0.0.160"),expr(ipv4.srcAddress.str() =~ "10.0.0.164"),expr(ipv4.srcAddress.str() =~ "10.0.0.168"),expr(ipv4.srcAddress.str() =~ "10.0.0.172"),expr(ipv4.srcAddress.str() =~ "10.0.0.176"),expr(ipv4.srcAddress.str() =~ "10.0.0.180"),expr(ipv4.srcAddress.str() =~ "10.0.0.184"),expr(ipv4.srcAddress.str() =~ "10.0.0.188"),expr(ipv4.srcAddress.str() =~ "10.0.0.192"),expr(ipv4.srcAddress.str() =~ "10.0.0.196"),expr(ipv4.srcAddress.str() =~ "10.0.0.200"),expr(ipv4.srcAddress.str() =~ "10.0.0.204"),expr(ipv4.srcAddress.str() =~ "10.0.0.208"),expr(ipv4.srcAddress.str() =~ "10.0.0.212"),expr(ipv4.srcAddress.str() =~ "10.1.0.0"),expr(ipv4.srcAddress.str() =~ "10.1.0.4"),expr(ipv4.srcAddress.str() =~ "10.1.0.8"),expr(ipv4.srcAddress.str() =~ "10.1.0.12"),expr(ipv4.srcAddress.str() =~ "10.1.0.16"),expr(ipv4.srcAddress.str() =~ "10.1.0.20"),expr(ipv4.srcAddress.str() =~ "10.1.0.24"),expr(ipv4.srcAddress.str() =~ "10.1.0.28"),expr(ipv4.srcAddress.str() =~ "10.1.0.32"),expr(ipv4.srcAddress.str() =~ "10.1.0.36"),expr(ipv4.srcAddress.str() =~ "10.1.0.40"),expr(ipv4.srcAddress.str() =~ "10.1.0.44"),expr(ipv4.srcAddress.str() =~ "10.1.0.48"),expr(ipv4.srcAddress.str() =~ "10.1.0.52"),expr(ipv4.srcAddress.str() =~ "10.1.0.56"),expr(ipv4.srcAddress.str() =~ "10.1.0.60"),expr(ipv4.srcAddress.str() =~ "10.1.0.64"),expr(ipv4.srcAddress.str() =~ "10.1.0.68"),expr(ipv4.srcAddress.str() =~ "10.1.0.72"),expr(ipv4.srcAddress.str() =~ "10.1.0.76"),expr(ipv4.srcAddress.str() =~ "10.1.0.80"),expr(ipv4.srcAddress.str() =~ "10.1.0.84"),expr(ipv4.srcAddress.str() =~ "10.1.0.88"),expr(ipv4.srcAddress.str() =~ "10.1.0.92"),expr(ipv4.srcAddress.str() =~ "10.1.0.96"),expr(ipv4.srcAddress.str() =~ "10.1.0.100"),expr(ipv4.srcAddress.str() =~ "10.2.0.0"),expr(ipv4.srcAddress.str() =~ "10.2.0.4"),expr(ipv4.srcAddress.str() =~ "10.2.0.8"),expr(ipv4.srcAddress.str() =~ "10.2.0.12"),expr(ipv4.srcAddress.str() =~ "10.2.0.16"),expr(ipv4.srcAddress.str() =~ "10.2.0.20"),expr(ipv4.srcAddress.str() =~ "10.2.0.24"),expr(ipv4.srcAddress.str() =~ "10.3.0.0"),expr(ipv4.srcAddress.str() =~ "10.3.0.4"),expr(ipv4.srcAddress.str() =~ "10.3.0.8"),expr(ipv4.srcAddress.str() =~ "10.3.0.12"),expr(ipv4.srcAddress.str() =~ "10.3.0.16"),expr(ipv4.srcAddress.str() =~ "10.3.0.20"),expr(ipv4.srcAddress.str() =~ "10.3.0.24"),expr(ipv4.srcAddress.str() =~ "10.3.0.28"),expr(ipv4.srcAddress.str() =~ "10.3.0.32"),expr(ipv4.srcAddress.str() =~ "10.3.0.36"),expr(ipv4.srcAddress.str() =~ "10.3.0.40"),expr(ipv4.srcAddress.str() =~ "10.3.0.44"),expr(ipv4.srcAddress.str() =~ "10.3.0.48"),expr(ipv4.srcAddress.str() =~ "10.3.0.52"),expr(ipv4.srcAddress.str() =~ "10.3.0.56"),expr(ipv4.srcAddress.str() =~ "10.3.0.60"),expr(ipv4.srcAddress.str() =~ "10.3.0.64"),expr(ipv4.srcAddress.str() =~ "10.3.0.68"),expr(ipv4.srcAddress.str() =~ "10.4.0.0"),expr(ipv4.srcAddress.str() =~ "10.4.0.4"),expr(ipv4.srcAddress.str() =~ "10.4.0.8"),expr(ipv4.srcAddress.str() =~ "10.4.0.12"),expr(ipv4.srcAddress.str() =~ "10.4.0.16"),expr(ipv4.srcAddress.str() =~ "10.4.0.20"),expr(ipv4.srcAddress.str() =~ "10.4.0.24"),expr(ipv4.srcAddress.str() =~ "10.5.0.0"),expr(ipv4.srcAddress.str() =~ "10.5.0.4"),expr(ipv4.srcAddress.str() =~ "10.5.0.8"),expr(ipv4.srcAddress.str() =~ "10.5.0.12"),expr(ipv4.srcAddress.str() =~ "10.5.0.16"),expr(ipv4.srcAddress.str() =~ "10.5.0.20"),expr(ipv4.srcAddress.str() =~ "10.5.0.24"),expr(ipv4.srcAddress.str() =~ "10.5.0.28"),expr(ipv4.srcAddress.str() =~ "10.5.0.32"),expr(ipv4.srcAddress.str() =~ "10.5.0.36"),expr(ipv4.srcAddress.str() =~ "10.5.0.40")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.0.0"),expr(ipv4.destAddress.str() =~ "10.0.0.4"),expr(ipv4.destAddress.str() =~ "10.0.0.8"),expr(ipv4.destAddress.str() =~ "10.0.0.12"),expr(ipv4.destAddress.str() =~ "10.0.0.16"),expr(ipv4.destAddress.str() =~ "10.0.0.20"),expr(ipv4.destAddress.str() =~ "10.0.0.24"),expr(ipv4.destAddress.str() =~ "10.0.0.28"),expr(ipv4.destAddress.str() =~ "10.0.0.32"),expr(ipv4.destAddress.str() =~ "10.0.0.36"),expr(ipv4.destAddress.str() =~ "10.0.0.40"),expr(ipv4.destAddress.str() =~ "10.0.0.44"),expr(ipv4.destAddress.str() =~ "10.0.0.48"),expr(ipv4.destAddress.str() =~ "10.0.0.52"),expr(ipv4.destAddress.str() =~ "10.0.0.56"),expr(ipv4.destAddress.str() =~ "10.0.0.60"),expr(ipv4.destAddress.str() =~ "10.0.0.64"),expr(ipv4.destAddress.str() =~ "10.0.0.68"),expr(ipv4.destAddress.str() =~ "10.0.0.72"),expr(ipv4.destAddress.str() =~ "10.0.0.76"),expr(ipv4.destAddress.str() =~ "10.0.0.80"),expr(ipv4.destAddress.str() =~ "10.0.0.84"),expr(ipv4.destAddress.str() =~ "10.0.0.88"),expr(ipv4.destAddress.str() =~ "10.0.0.92"),expr(ipv4.destAddress.str() =~ "10.0.0.96"),expr(ipv4.destAddress.str() =~ "10.0.0.100"),expr(ipv4.destAddress.str() =~ "10.0.0.104"),expr(ipv4.destAddress.str() =~ "10.0.0.108"),expr(ipv4.destAddress.str() =~ "10.0.0.112"),expr(ipv4.destAddress.str() =~ "10.0.0.116"),expr(ipv4.destAddress.str() =~ "10.0.0.120"),expr(ipv4.destAddress.str() =~ "10.0.0.124"),expr(ipv4.destAddress.str() =~ "10.0.0.128"),expr(ipv4.destAddress.str() =~ "10.0.0.132"),expr(ipv4.destAddress.str() =~ "10.0.0.136"),expr(ipv4.destAddress.str() =~ "10.0.0.140"),expr(ipv4.destAddress.str() =~ "10.0.0.144"),expr(ipv4.destAddress.str() =~ "10.0.0.148"),expr(ipv4.destAddress.str() =~ "10.0.0.152"),expr(ipv4.destAddress.str() =~ "10.0.0.156"),expr(ipv4.destAddress.str() =~ "10.0.0.160"),expr(ipv4.destAddress.str() =~ "10.0.0.164"),expr(ipv4.destAddress.str() =~ "10.0.0.168"),expr(ipv4.destAddress.str() =~ "10.0.0.172"),expr(ipv4.destAddress.str() =~ "10.0.0.176"),expr(ipv4.destAddress.str() =~ "10.0.0.180"),expr(ipv4.destAddress.str() =~ "10.0.0.184"),expr(ipv4.destAddress.str() =~ "10.0.0.188"),expr(ipv4.destAddress.str() =~ "10.0.0.192"),expr(ipv4.destAddress.str() =~ "10.0.0.196"),expr(ipv4.destAddress.str() =~ "10.0.0.200"),expr(ipv4.destAddress.str() =~ "10.0.0.204"),expr(ipv4.destAddress.str() =~ "10.0.0.208"),expr(ipv4.destAddress.str() =~ "10.0.0.212"),expr(ipv4.destAddress.str() =~ "10.1.0.0"),expr(ipv4.destAddress.str() =~ "10.1.0.4"),expr(ipv4.destAddress.str() =~ "10.1.0.8"),expr(ipv4.destAddress.str() =~ "10.1.0.12"),expr(ipv4.destAddress.str() =~ "10.1.0.16"),expr(ipv4.destAddress.str() =~ "10.1.0.20"),expr(ipv4.destAddress.str() =~ "10.1.0.24"),expr(ipv4.destAddress.str() =~ "10.1.0.28"),expr(ipv4.destAddress.str() =~ "10.1.0.32"),expr(ipv4.destAddress.str() =~ "10.1.0.36"),expr(ipv4.destAddress.str() =~ "10.1.0.40"),expr(ipv4.destAddress.str() =~ "10.1.0.44"),expr(ipv4.destAddress.str() =~ "10.1.0.48"),expr(ipv4.destAddress.str() =~ "10.1.0.52"),expr(ipv4.destAddress.str() =~ "10.1.0.56"),expr(ipv4.destAddress.str() =~ "10.1.0.60"),expr(ipv4.destAddress.str() =~ "10.1.0.64"),expr(ipv4.destAddress.str() =~ "10.1.0.68"),expr(ipv4.destAddress.str() =~ "10.1.0.72"),expr(ipv4.destAddress.str() =~ "10.1.0.76"),expr(ipv4.destAddress.str() =~ "10.1.0.80"),expr(ipv4.destAddress.str() =~ "10.1.0.84"),expr(ipv4.destAddress.str() =~ "10.1.0.88"),expr(ipv4.destAddress.str() =~ "10.1.0.92"),expr(ipv4.destAddress.str() =~ "10.1.0.96"),expr(ipv4.destAddress.str() =~ "10.1.0.100"),expr(ipv4.destAddress.str() =~ "10.2.0.0"),expr(ipv4.destAddress.str() =~ "10.2.0.4"),expr(ipv4.destAddress.str() =~ "10.2.0.8"),expr(ipv4.destAddress.str() =~ "10.2.0.12"),expr(ipv4.destAddress.str() =~ "10.2.0.16"),expr(ipv4.destAddress.str() =~ "10.2.0.20"),expr(ipv4.destAddress.str() =~ "10.2.0.24"),expr(ipv4.destAddress.str() =~ "10.3.0.0"),expr(ipv4.destAddress.str() =~ "10.3.0.4"),expr(ipv4.destAddress.str() =~ "10.3.0.8"),expr(ipv4.destAddress.str() =~ "10.3.0.12"),expr(ipv4.destAddress.str() =~ "10.3.0.16"),expr(ipv4.destAddress.str() =~ "10.3.0.20"),expr(ipv4.destAddress.str() =~ "10.3.0.24"),expr(ipv4.destAddress.str() =~ "10.3.0.28"),expr(ipv4.destAddress.str() =~ "10.3.0.32"),expr(ipv4.destAddress.str() =~ "10.3.0.36"),expr(ipv4.destAddress.str() =~ "10.3.0.40"),expr(ipv4.destAddress.str() =~ "10.3.0.44"),expr(ipv4.destAddress.str() =~ "10.3.0.48"),expr(ipv4.destAddress.str() =~ "10.3.0.52"),expr(ipv4.destAddress.str() =~ "10.3.0.56"),expr(ipv4.destAddress.str() =~ "10.3.0.60"),expr(ipv4.destAddress.str() =~ "10.3.0.64"),expr(ipv4.destAddress.str() =~ "10.3.0.68"),expr(ipv4.destAddress.str() =~ "10.4.0.0"),expr(ipv4.destAddress.str() =~ "10.4.0.4"),expr(ipv4.destAddress.str() =~ "10.4.0.8"),expr(ipv4.destAddress.str() =~ "10.4.0.12"),expr(ipv4.destAddress.str() =~ "10.4.0.16"),expr(ipv4.destAddress.str() =~ "10.4.0.20"),expr(ipv4.destAddress.str() =~ "10.4.0.24"),expr(ipv4.destAddress.str() =~ "10.5.0.0"),expr(ipv4.destAddress.str() =~ "10.5.0.4"),expr(ipv4.destAddress.str() =~ "10.5.0.8"),expr(ipv4.destAddress.str() =~ "10.5.0.12"),expr(ipv4.destAddress.str() =~ "10.5.0.16"),expr(ipv4.destAddress.str() =~ "10.5.0.20"),expr(ipv4.destAddress.str() =~ "10.5.0.24"),expr(ipv4.destAddress.str() =~ "10.5.0.28"),expr(ipv4.destAddress.str() =~ "10.5.0.32"),expr(ipv4.destAddress.str() =~ "10.5.0.36"),expr(ipv4.destAddress.str() =~ "10.5.0.40")]

**.connFIX0.datarate = 100000000bps
**.connFIX0.delay = 40ms


[Config criticalVoIPtestDos2SlicesHTB_R100_Q35_M100_C100]
description = "Configuration for criticalVoIPtestDos2SlicesHTB_R100_Q35_M100_C100. All five applications. QoS employed. Guarantee Multiplier: 1.0; Ceil multiplier: 1.0"

extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/routing/criticalVoIPtestDos2SlicesHTB_R100_Q35_M100_C100Routing.xml")

*.nVID = 54 # Number of video clients
*.nLVD = 26 # Number of live video client
*.nFDO = 7 # Number of file download clients
*.nSSH = 7 # Number of SSH clients
*.nVIP = 18 # Number of VoIP clients
*.ncVIP = 11 # Number of critical VoIP clients

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 123
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.scheduler.adjustHTBTreeValuesForCorectness = false
*.router*.ppp[0].queue.scheduler.checkHTBTreeValuesForCorectness = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/criticalVoIPtestDos2SlicesHTB_R100_Q35_M100_C100HTB.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.0.0"),expr(ipv4.srcAddress.str() =~ "10.0.0.4"),expr(ipv4.srcAddress.str() =~ "10.0.0.8"),expr(ipv4.srcAddress.str() =~ "10.0.0.12"),expr(ipv4.srcAddress.str() =~ "10.0.0.16"),expr(ipv4.srcAddress.str() =~ "10.0.0.20"),expr(ipv4.srcAddress.str() =~ "10.0.0.24"),expr(ipv4.srcAddress.str() =~ "10.0.0.28"),expr(ipv4.srcAddress.str() =~ "10.0.0.32"),expr(ipv4.srcAddress.str() =~ "10.0.0.36"),expr(ipv4.srcAddress.str() =~ "10.0.0.40"),expr(ipv4.srcAddress.str() =~ "10.0.0.44"),expr(ipv4.srcAddress.str() =~ "10.0.0.48"),expr(ipv4.srcAddress.str() =~ "10.0.0.52"),expr(ipv4.srcAddress.str() =~ "10.0.0.56"),expr(ipv4.srcAddress.str() =~ "10.0.0.60"),expr(ipv4.srcAddress.str() =~ "10.0.0.64"),expr(ipv4.srcAddress.str() =~ "10.0.0.68"),expr(ipv4.srcAddress.str() =~ "10.0.0.72"),expr(ipv4.srcAddress.str() =~ "10.0.0.76"),expr(ipv4.srcAddress.str() =~ "10.0.0.80"),expr(ipv4.srcAddress.str() =~ "10.0.0.84"),expr(ipv4.srcAddress.str() =~ "10.0.0.88"),expr(ipv4.srcAddress.str() =~ "10.0.0.92"),expr(ipv4.srcAddress.str() =~ "10.0.0.96"),expr(ipv4.srcAddress.str() =~ "10.0.0.100"),expr(ipv4.srcAddress.str() =~ "10.0.0.104"),expr(ipv4.srcAddress.str() =~ "10.0.0.108"),expr(ipv4.srcAddress.str() =~ "10.0.0.112"),expr(ipv4.srcAddress.str() =~ "10.0.0.116"),expr(ipv4.srcAddress.str() =~ "10.0.0.120"),expr(ipv4.srcAddress.str() =~ "10.0.0.124"),expr(ipv4.srcAddress.str() =~ "10.0.0.128"),expr(ipv4.srcAddress.str() =~ "10.0.0.132"),expr(ipv4.srcAddress.str() =~ "10.0.0.136"),expr(ipv4.srcAddress.str() =~ "10.0.0.140"),expr(ipv4.srcAddress.str() =~ "10.0.0.144"),expr(ipv4.srcAddress.str() =~ "10.0.0.148"),expr(ipv4.srcAddress.str() =~ "10.0.0.152"),expr(ipv4.srcAddress.str() =~ "10.0.0.156"),expr(ipv4.srcAddress.str() =~ "10.0.0.160"),expr(ipv4.srcAddress.str() =~ "10.0.0.164"),expr(ipv4.srcAddress.str() =~ "10.0.0.168"),expr(ipv4.srcAddress.str() =~ "10.0.0.172"),expr(ipv4.srcAddress.str() =~ "10.0.0.176"),expr(ipv4.srcAddress.str() =~ "10.0.0.180"),expr(ipv4.srcAddress.str() =~ "10.0.0.184"),expr(ipv4.srcAddress.str() =~ "10.0.0.188"),expr(ipv4.srcAddress.str() =~ "10.0.0.192"),expr(ipv4.srcAddress.str() =~ "10.0.0.196"),expr(ipv4.srcAddress.str() =~ "10.0.0.200"),expr(ipv4.srcAddress.str() =~ "10.0.0.204"),expr(ipv4.srcAddress.str() =~ "10.0.0.208"),expr(ipv4.srcAddress.str() =~ "10.0.0.212"),expr(ipv4.srcAddress.str() =~ "10.1.0.0"),expr(ipv4.srcAddress.str() =~ "10.1.0.4"),expr(ipv4.srcAddress.str() =~ "10.1.0.8"),expr(ipv4.srcAddress.str() =~ "10.1.0.12"),expr(ipv4.srcAddress.str() =~ "10.1.0.16"),expr(ipv4.srcAddress.str() =~ "10.1.0.20"),expr(ipv4.srcAddress.str() =~ "10.1.0.24"),expr(ipv4.srcAddress.str() =~ "10.1.0.28"),expr(ipv4.srcAddress.str() =~ "10.1.0.32"),expr(ipv4.srcAddress.str() =~ "10.1.0.36"),expr(ipv4.srcAddress.str() =~ "10.1.0.40"),expr(ipv4.srcAddress.str() =~ "10.1.0.44"),expr(ipv4.srcAddress.str() =~ "10.1.0.48"),expr(ipv4.srcAddress.str() =~ "10.1.0.52"),expr(ipv4.srcAddress.str() =~ "10.1.0.56"),expr(ipv4.srcAddress.str() =~ "10.1.0.60"),expr(ipv4.srcAddress.str() =~ "10.1.0.64"),expr(ipv4.srcAddress.str() =~ "10.1.0.68"),expr(ipv4.srcAddress.str() =~ "10.1.0.72"),expr(ipv4.srcAddress.str() =~ "10.1.0.76"),expr(ipv4.srcAddress.str() =~ "10.1.0.80"),expr(ipv4.srcAddress.str() =~ "10.1.0.84"),expr(ipv4.srcAddress.str() =~ "10.1.0.88"),expr(ipv4.srcAddress.str() =~ "10.1.0.92"),expr(ipv4.srcAddress.str() =~ "10.1.0.96"),expr(ipv4.srcAddress.str() =~ "10.1.0.100"),expr(ipv4.srcAddress.str() =~ "10.2.0.0"),expr(ipv4.srcAddress.str() =~ "10.2.0.4"),expr(ipv4.srcAddress.str() =~ "10.2.0.8"),expr(ipv4.srcAddress.str() =~ "10.2.0.12"),expr(ipv4.srcAddress.str() =~ "10.2.0.16"),expr(ipv4.srcAddress.str() =~ "10.2.0.20"),expr(ipv4.srcAddress.str() =~ "10.2.0.24"),expr(ipv4.srcAddress.str() =~ "10.3.0.0"),expr(ipv4.srcAddress.str() =~ "10.3.0.4"),expr(ipv4.srcAddress.str() =~ "10.3.0.8"),expr(ipv4.srcAddress.str() =~ "10.3.0.12"),expr(ipv4.srcAddress.str() =~ "10.3.0.16"),expr(ipv4.srcAddress.str() =~ "10.3.0.20"),expr(ipv4.srcAddress.str() =~ "10.3.0.24"),expr(ipv4.srcAddress.str() =~ "10.3.0.28"),expr(ipv4.srcAddress.str() =~ "10.3.0.32"),expr(ipv4.srcAddress.str() =~ "10.3.0.36"),expr(ipv4.srcAddress.str() =~ "10.3.0.40"),expr(ipv4.srcAddress.str() =~ "10.3.0.44"),expr(ipv4.srcAddress.str() =~ "10.3.0.48"),expr(ipv4.srcAddress.str() =~ "10.3.0.52"),expr(ipv4.srcAddress.str() =~ "10.3.0.56"),expr(ipv4.srcAddress.str() =~ "10.3.0.60"),expr(ipv4.srcAddress.str() =~ "10.3.0.64"),expr(ipv4.srcAddress.str() =~ "10.3.0.68"),expr(ipv4.srcAddress.str() =~ "10.4.0.0"),expr(ipv4.srcAddress.str() =~ "10.4.0.4"),expr(ipv4.srcAddress.str() =~ "10.4.0.8"),expr(ipv4.srcAddress.str() =~ "10.4.0.12"),expr(ipv4.srcAddress.str() =~ "10.4.0.16"),expr(ipv4.srcAddress.str() =~ "10.4.0.20"),expr(ipv4.srcAddress.str() =~ "10.4.0.24"),expr(ipv4.srcAddress.str() =~ "10.5.0.0"),expr(ipv4.srcAddress.str() =~ "10.5.0.4"),expr(ipv4.srcAddress.str() =~ "10.5.0.8"),expr(ipv4.srcAddress.str() =~ "10.5.0.12"),expr(ipv4.srcAddress.str() =~ "10.5.0.16"),expr(ipv4.srcAddress.str() =~ "10.5.0.20"),expr(ipv4.srcAddress.str() =~ "10.5.0.24"),expr(ipv4.srcAddress.str() =~ "10.5.0.28"),expr(ipv4.srcAddress.str() =~ "10.5.0.32"),expr(ipv4.srcAddress.str() =~ "10.5.0.36"),expr(ipv4.srcAddress.str() =~ "10.5.0.40")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.0.0"),expr(ipv4.destAddress.str() =~ "10.0.0.4"),expr(ipv4.destAddress.str() =~ "10.0.0.8"),expr(ipv4.destAddress.str() =~ "10.0.0.12"),expr(ipv4.destAddress.str() =~ "10.0.0.16"),expr(ipv4.destAddress.str() =~ "10.0.0.20"),expr(ipv4.destAddress.str() =~ "10.0.0.24"),expr(ipv4.destAddress.str() =~ "10.0.0.28"),expr(ipv4.destAddress.str() =~ "10.0.0.32"),expr(ipv4.destAddress.str() =~ "10.0.0.36"),expr(ipv4.destAddress.str() =~ "10.0.0.40"),expr(ipv4.destAddress.str() =~ "10.0.0.44"),expr(ipv4.destAddress.str() =~ "10.0.0.48"),expr(ipv4.destAddress.str() =~ "10.0.0.52"),expr(ipv4.destAddress.str() =~ "10.0.0.56"),expr(ipv4.destAddress.str() =~ "10.0.0.60"),expr(ipv4.destAddress.str() =~ "10.0.0.64"),expr(ipv4.destAddress.str() =~ "10.0.0.68"),expr(ipv4.destAddress.str() =~ "10.0.0.72"),expr(ipv4.destAddress.str() =~ "10.0.0.76"),expr(ipv4.destAddress.str() =~ "10.0.0.80"),expr(ipv4.destAddress.str() =~ "10.0.0.84"),expr(ipv4.destAddress.str() =~ "10.0.0.88"),expr(ipv4.destAddress.str() =~ "10.0.0.92"),expr(ipv4.destAddress.str() =~ "10.0.0.96"),expr(ipv4.destAddress.str() =~ "10.0.0.100"),expr(ipv4.destAddress.str() =~ "10.0.0.104"),expr(ipv4.destAddress.str() =~ "10.0.0.108"),expr(ipv4.destAddress.str() =~ "10.0.0.112"),expr(ipv4.destAddress.str() =~ "10.0.0.116"),expr(ipv4.destAddress.str() =~ "10.0.0.120"),expr(ipv4.destAddress.str() =~ "10.0.0.124"),expr(ipv4.destAddress.str() =~ "10.0.0.128"),expr(ipv4.destAddress.str() =~ "10.0.0.132"),expr(ipv4.destAddress.str() =~ "10.0.0.136"),expr(ipv4.destAddress.str() =~ "10.0.0.140"),expr(ipv4.destAddress.str() =~ "10.0.0.144"),expr(ipv4.destAddress.str() =~ "10.0.0.148"),expr(ipv4.destAddress.str() =~ "10.0.0.152"),expr(ipv4.destAddress.str() =~ "10.0.0.156"),expr(ipv4.destAddress.str() =~ "10.0.0.160"),expr(ipv4.destAddress.str() =~ "10.0.0.164"),expr(ipv4.destAddress.str() =~ "10.0.0.168"),expr(ipv4.destAddress.str() =~ "10.0.0.172"),expr(ipv4.destAddress.str() =~ "10.0.0.176"),expr(ipv4.destAddress.str() =~ "10.0.0.180"),expr(ipv4.destAddress.str() =~ "10.0.0.184"),expr(ipv4.destAddress.str() =~ "10.0.0.188"),expr(ipv4.destAddress.str() =~ "10.0.0.192"),expr(ipv4.destAddress.str() =~ "10.0.0.196"),expr(ipv4.destAddress.str() =~ "10.0.0.200"),expr(ipv4.destAddress.str() =~ "10.0.0.204"),expr(ipv4.destAddress.str() =~ "10.0.0.208"),expr(ipv4.destAddress.str() =~ "10.0.0.212"),expr(ipv4.destAddress.str() =~ "10.1.0.0"),expr(ipv4.destAddress.str() =~ "10.1.0.4"),expr(ipv4.destAddress.str() =~ "10.1.0.8"),expr(ipv4.destAddress.str() =~ "10.1.0.12"),expr(ipv4.destAddress.str() =~ "10.1.0.16"),expr(ipv4.destAddress.str() =~ "10.1.0.20"),expr(ipv4.destAddress.str() =~ "10.1.0.24"),expr(ipv4.destAddress.str() =~ "10.1.0.28"),expr(ipv4.destAddress.str() =~ "10.1.0.32"),expr(ipv4.destAddress.str() =~ "10.1.0.36"),expr(ipv4.destAddress.str() =~ "10.1.0.40"),expr(ipv4.destAddress.str() =~ "10.1.0.44"),expr(ipv4.destAddress.str() =~ "10.1.0.48"),expr(ipv4.destAddress.str() =~ "10.1.0.52"),expr(ipv4.destAddress.str() =~ "10.1.0.56"),expr(ipv4.destAddress.str() =~ "10.1.0.60"),expr(ipv4.destAddress.str() =~ "10.1.0.64"),expr(ipv4.destAddress.str() =~ "10.1.0.68"),expr(ipv4.destAddress.str() =~ "10.1.0.72"),expr(ipv4.destAddress.str() =~ "10.1.0.76"),expr(ipv4.destAddress.str() =~ "10.1.0.80"),expr(ipv4.destAddress.str() =~ "10.1.0.84"),expr(ipv4.destAddress.str() =~ "10.1.0.88"),expr(ipv4.destAddress.str() =~ "10.1.0.92"),expr(ipv4.destAddress.str() =~ "10.1.0.96"),expr(ipv4.destAddress.str() =~ "10.1.0.100"),expr(ipv4.destAddress.str() =~ "10.2.0.0"),expr(ipv4.destAddress.str() =~ "10.2.0.4"),expr(ipv4.destAddress.str() =~ "10.2.0.8"),expr(ipv4.destAddress.str() =~ "10.2.0.12"),expr(ipv4.destAddress.str() =~ "10.2.0.16"),expr(ipv4.destAddress.str() =~ "10.2.0.20"),expr(ipv4.destAddress.str() =~ "10.2.0.24"),expr(ipv4.destAddress.str() =~ "10.3.0.0"),expr(ipv4.destAddress.str() =~ "10.3.0.4"),expr(ipv4.destAddress.str() =~ "10.3.0.8"),expr(ipv4.destAddress.str() =~ "10.3.0.12"),expr(ipv4.destAddress.str() =~ "10.3.0.16"),expr(ipv4.destAddress.str() =~ "10.3.0.20"),expr(ipv4.destAddress.str() =~ "10.3.0.24"),expr(ipv4.destAddress.str() =~ "10.3.0.28"),expr(ipv4.destAddress.str() =~ "10.3.0.32"),expr(ipv4.destAddress.str() =~ "10.3.0.36"),expr(ipv4.destAddress.str() =~ "10.3.0.40"),expr(ipv4.destAddress.str() =~ "10.3.0.44"),expr(ipv4.destAddress.str() =~ "10.3.0.48"),expr(ipv4.destAddress.str() =~ "10.3.0.52"),expr(ipv4.destAddress.str() =~ "10.3.0.56"),expr(ipv4.destAddress.str() =~ "10.3.0.60"),expr(ipv4.destAddress.str() =~ "10.3.0.64"),expr(ipv4.destAddress.str() =~ "10.3.0.68"),expr(ipv4.destAddress.str() =~ "10.4.0.0"),expr(ipv4.destAddress.str() =~ "10.4.0.4"),expr(ipv4.destAddress.str() =~ "10.4.0.8"),expr(ipv4.destAddress.str() =~ "10.4.0.12"),expr(ipv4.destAddress.str() =~ "10.4.0.16"),expr(ipv4.destAddress.str() =~ "10.4.0.20"),expr(ipv4.destAddress.str() =~ "10.4.0.24"),expr(ipv4.destAddress.str() =~ "10.5.0.0"),expr(ipv4.destAddress.str() =~ "10.5.0.4"),expr(ipv4.destAddress.str() =~ "10.5.0.8"),expr(ipv4.destAddress.str() =~ "10.5.0.12"),expr(ipv4.destAddress.str() =~ "10.5.0.16"),expr(ipv4.destAddress.str() =~ "10.5.0.20"),expr(ipv4.destAddress.str() =~ "10.5.0.24"),expr(ipv4.destAddress.str() =~ "10.5.0.28"),expr(ipv4.destAddress.str() =~ "10.5.0.32"),expr(ipv4.destAddress.str() =~ "10.5.0.36"),expr(ipv4.destAddress.str() =~ "10.5.0.40")]

**.connFIX0.datarate = 100000000bps
**.connFIX0.delay = 40ms


[Config criticalVoIPtestTres2SlicesHTB_R100_Q35_M100_C100]
description = "Configuration for criticalVoIPtestTres2SlicesHTB_R100_Q35_M100_C100. All five applications. QoS employed. Guarantee Multiplier: 1.0; Ceil multiplier: 1.0"

extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/routing/criticalVoIPtestTres2SlicesHTB_R100_Q35_M100_C100Routing.xml")

*.nVID = 54 # Number of video clients
*.nLVD = 26 # Number of live video client
*.nFDO = 7 # Number of file download clients
*.nSSH = 10 # Number of SSH clients
*.nVIP = 20 # Number of VoIP clients
*.ncVIP = 9 # Number of critical VoIP clients

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 126
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.scheduler.adjustHTBTreeValuesForCorectness = false
*.router*.ppp[0].queue.scheduler.checkHTBTreeValuesForCorectness = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/criticalVoIPtestTres2SlicesHTB_R100_Q35_M100_C100HTB.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.0.0"),expr(ipv4.srcAddress.str() =~ "10.0.0.4"),expr(ipv4.srcAddress.str() =~ "10.0.0.8"),expr(ipv4.srcAddress.str() =~ "10.0.0.12"),expr(ipv4.srcAddress.str() =~ "10.0.0.16"),expr(ipv4.srcAddress.str() =~ "10.0.0.20"),expr(ipv4.srcAddress.str() =~ "10.0.0.24"),expr(ipv4.srcAddress.str() =~ "10.0.0.28"),expr(ipv4.srcAddress.str() =~ "10.0.0.32"),expr(ipv4.srcAddress.str() =~ "10.0.0.36"),expr(ipv4.srcAddress.str() =~ "10.0.0.40"),expr(ipv4.srcAddress.str() =~ "10.0.0.44"),expr(ipv4.srcAddress.str() =~ "10.0.0.48"),expr(ipv4.srcAddress.str() =~ "10.0.0.52"),expr(ipv4.srcAddress.str() =~ "10.0.0.56"),expr(ipv4.srcAddress.str() =~ "10.0.0.60"),expr(ipv4.srcAddress.str() =~ "10.0.0.64"),expr(ipv4.srcAddress.str() =~ "10.0.0.68"),expr(ipv4.srcAddress.str() =~ "10.0.0.72"),expr(ipv4.srcAddress.str() =~ "10.0.0.76"),expr(ipv4.srcAddress.str() =~ "10.0.0.80"),expr(ipv4.srcAddress.str() =~ "10.0.0.84"),expr(ipv4.srcAddress.str() =~ "10.0.0.88"),expr(ipv4.srcAddress.str() =~ "10.0.0.92"),expr(ipv4.srcAddress.str() =~ "10.0.0.96"),expr(ipv4.srcAddress.str() =~ "10.0.0.100"),expr(ipv4.srcAddress.str() =~ "10.0.0.104"),expr(ipv4.srcAddress.str() =~ "10.0.0.108"),expr(ipv4.srcAddress.str() =~ "10.0.0.112"),expr(ipv4.srcAddress.str() =~ "10.0.0.116"),expr(ipv4.srcAddress.str() =~ "10.0.0.120"),expr(ipv4.srcAddress.str() =~ "10.0.0.124"),expr(ipv4.srcAddress.str() =~ "10.0.0.128"),expr(ipv4.srcAddress.str() =~ "10.0.0.132"),expr(ipv4.srcAddress.str() =~ "10.0.0.136"),expr(ipv4.srcAddress.str() =~ "10.0.0.140"),expr(ipv4.srcAddress.str() =~ "10.0.0.144"),expr(ipv4.srcAddress.str() =~ "10.0.0.148"),expr(ipv4.srcAddress.str() =~ "10.0.0.152"),expr(ipv4.srcAddress.str() =~ "10.0.0.156"),expr(ipv4.srcAddress.str() =~ "10.0.0.160"),expr(ipv4.srcAddress.str() =~ "10.0.0.164"),expr(ipv4.srcAddress.str() =~ "10.0.0.168"),expr(ipv4.srcAddress.str() =~ "10.0.0.172"),expr(ipv4.srcAddress.str() =~ "10.0.0.176"),expr(ipv4.srcAddress.str() =~ "10.0.0.180"),expr(ipv4.srcAddress.str() =~ "10.0.0.184"),expr(ipv4.srcAddress.str() =~ "10.0.0.188"),expr(ipv4.srcAddress.str() =~ "10.0.0.192"),expr(ipv4.srcAddress.str() =~ "10.0.0.196"),expr(ipv4.srcAddress.str() =~ "10.0.0.200"),expr(ipv4.srcAddress.str() =~ "10.0.0.204"),expr(ipv4.srcAddress.str() =~ "10.0.0.208"),expr(ipv4.srcAddress.str() =~ "10.0.0.212"),expr(ipv4.srcAddress.str() =~ "10.1.0.0"),expr(ipv4.srcAddress.str() =~ "10.1.0.4"),expr(ipv4.srcAddress.str() =~ "10.1.0.8"),expr(ipv4.srcAddress.str() =~ "10.1.0.12"),expr(ipv4.srcAddress.str() =~ "10.1.0.16"),expr(ipv4.srcAddress.str() =~ "10.1.0.20"),expr(ipv4.srcAddress.str() =~ "10.1.0.24"),expr(ipv4.srcAddress.str() =~ "10.1.0.28"),expr(ipv4.srcAddress.str() =~ "10.1.0.32"),expr(ipv4.srcAddress.str() =~ "10.1.0.36"),expr(ipv4.srcAddress.str() =~ "10.1.0.40"),expr(ipv4.srcAddress.str() =~ "10.1.0.44"),expr(ipv4.srcAddress.str() =~ "10.1.0.48"),expr(ipv4.srcAddress.str() =~ "10.1.0.52"),expr(ipv4.srcAddress.str() =~ "10.1.0.56"),expr(ipv4.srcAddress.str() =~ "10.1.0.60"),expr(ipv4.srcAddress.str() =~ "10.1.0.64"),expr(ipv4.srcAddress.str() =~ "10.1.0.68"),expr(ipv4.srcAddress.str() =~ "10.1.0.72"),expr(ipv4.srcAddress.str() =~ "10.1.0.76"),expr(ipv4.srcAddress.str() =~ "10.1.0.80"),expr(ipv4.srcAddress.str() =~ "10.1.0.84"),expr(ipv4.srcAddress.str() =~ "10.1.0.88"),expr(ipv4.srcAddress.str() =~ "10.1.0.92"),expr(ipv4.srcAddress.str() =~ "10.1.0.96"),expr(ipv4.srcAddress.str() =~ "10.1.0.100"),expr(ipv4.srcAddress.str() =~ "10.2.0.0"),expr(ipv4.srcAddress.str() =~ "10.2.0.4"),expr(ipv4.srcAddress.str() =~ "10.2.0.8"),expr(ipv4.srcAddress.str() =~ "10.2.0.12"),expr(ipv4.srcAddress.str() =~ "10.2.0.16"),expr(ipv4.srcAddress.str() =~ "10.2.0.20"),expr(ipv4.srcAddress.str() =~ "10.2.0.24"),expr(ipv4.srcAddress.str() =~ "10.3.0.0"),expr(ipv4.srcAddress.str() =~ "10.3.0.4"),expr(ipv4.srcAddress.str() =~ "10.3.0.8"),expr(ipv4.srcAddress.str() =~ "10.3.0.12"),expr(ipv4.srcAddress.str() =~ "10.3.0.16"),expr(ipv4.srcAddress.str() =~ "10.3.0.20"),expr(ipv4.srcAddress.str() =~ "10.3.0.24"),expr(ipv4.srcAddress.str() =~ "10.3.0.28"),expr(ipv4.srcAddress.str() =~ "10.3.0.32"),expr(ipv4.srcAddress.str() =~ "10.3.0.36"),expr(ipv4.srcAddress.str() =~ "10.3.0.40"),expr(ipv4.srcAddress.str() =~ "10.3.0.44"),expr(ipv4.srcAddress.str() =~ "10.3.0.48"),expr(ipv4.srcAddress.str() =~ "10.3.0.52"),expr(ipv4.srcAddress.str() =~ "10.3.0.56"),expr(ipv4.srcAddress.str() =~ "10.3.0.60"),expr(ipv4.srcAddress.str() =~ "10.3.0.64"),expr(ipv4.srcAddress.str() =~ "10.3.0.68"),expr(ipv4.srcAddress.str() =~ "10.3.0.72"),expr(ipv4.srcAddress.str() =~ "10.3.0.76"),expr(ipv4.srcAddress.str() =~ "10.4.0.0"),expr(ipv4.srcAddress.str() =~ "10.4.0.4"),expr(ipv4.srcAddress.str() =~ "10.4.0.8"),expr(ipv4.srcAddress.str() =~ "10.4.0.12"),expr(ipv4.srcAddress.str() =~ "10.4.0.16"),expr(ipv4.srcAddress.str() =~ "10.4.0.20"),expr(ipv4.srcAddress.str() =~ "10.4.0.24"),expr(ipv4.srcAddress.str() =~ "10.4.0.28"),expr(ipv4.srcAddress.str() =~ "10.4.0.32"),expr(ipv4.srcAddress.str() =~ "10.4.0.36"),expr(ipv4.srcAddress.str() =~ "10.5.0.0"),expr(ipv4.srcAddress.str() =~ "10.5.0.4"),expr(ipv4.srcAddress.str() =~ "10.5.0.8"),expr(ipv4.srcAddress.str() =~ "10.5.0.12"),expr(ipv4.srcAddress.str() =~ "10.5.0.16"),expr(ipv4.srcAddress.str() =~ "10.5.0.20"),expr(ipv4.srcAddress.str() =~ "10.5.0.24"),expr(ipv4.srcAddress.str() =~ "10.5.0.28"),expr(ipv4.srcAddress.str() =~ "10.5.0.32")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.0.0"),expr(ipv4.destAddress.str() =~ "10.0.0.4"),expr(ipv4.destAddress.str() =~ "10.0.0.8"),expr(ipv4.destAddress.str() =~ "10.0.0.12"),expr(ipv4.destAddress.str() =~ "10.0.0.16"),expr(ipv4.destAddress.str() =~ "10.0.0.20"),expr(ipv4.destAddress.str() =~ "10.0.0.24"),expr(ipv4.destAddress.str() =~ "10.0.0.28"),expr(ipv4.destAddress.str() =~ "10.0.0.32"),expr(ipv4.destAddress.str() =~ "10.0.0.36"),expr(ipv4.destAddress.str() =~ "10.0.0.40"),expr(ipv4.destAddress.str() =~ "10.0.0.44"),expr(ipv4.destAddress.str() =~ "10.0.0.48"),expr(ipv4.destAddress.str() =~ "10.0.0.52"),expr(ipv4.destAddress.str() =~ "10.0.0.56"),expr(ipv4.destAddress.str() =~ "10.0.0.60"),expr(ipv4.destAddress.str() =~ "10.0.0.64"),expr(ipv4.destAddress.str() =~ "10.0.0.68"),expr(ipv4.destAddress.str() =~ "10.0.0.72"),expr(ipv4.destAddress.str() =~ "10.0.0.76"),expr(ipv4.destAddress.str() =~ "10.0.0.80"),expr(ipv4.destAddress.str() =~ "10.0.0.84"),expr(ipv4.destAddress.str() =~ "10.0.0.88"),expr(ipv4.destAddress.str() =~ "10.0.0.92"),expr(ipv4.destAddress.str() =~ "10.0.0.96"),expr(ipv4.destAddress.str() =~ "10.0.0.100"),expr(ipv4.destAddress.str() =~ "10.0.0.104"),expr(ipv4.destAddress.str() =~ "10.0.0.108"),expr(ipv4.destAddress.str() =~ "10.0.0.112"),expr(ipv4.destAddress.str() =~ "10.0.0.116"),expr(ipv4.destAddress.str() =~ "10.0.0.120"),expr(ipv4.destAddress.str() =~ "10.0.0.124"),expr(ipv4.destAddress.str() =~ "10.0.0.128"),expr(ipv4.destAddress.str() =~ "10.0.0.132"),expr(ipv4.destAddress.str() =~ "10.0.0.136"),expr(ipv4.destAddress.str() =~ "10.0.0.140"),expr(ipv4.destAddress.str() =~ "10.0.0.144"),expr(ipv4.destAddress.str() =~ "10.0.0.148"),expr(ipv4.destAddress.str() =~ "10.0.0.152"),expr(ipv4.destAddress.str() =~ "10.0.0.156"),expr(ipv4.destAddress.str() =~ "10.0.0.160"),expr(ipv4.destAddress.str() =~ "10.0.0.164"),expr(ipv4.destAddress.str() =~ "10.0.0.168"),expr(ipv4.destAddress.str() =~ "10.0.0.172"),expr(ipv4.destAddress.str() =~ "10.0.0.176"),expr(ipv4.destAddress.str() =~ "10.0.0.180"),expr(ipv4.destAddress.str() =~ "10.0.0.184"),expr(ipv4.destAddress.str() =~ "10.0.0.188"),expr(ipv4.destAddress.str() =~ "10.0.0.192"),expr(ipv4.destAddress.str() =~ "10.0.0.196"),expr(ipv4.destAddress.str() =~ "10.0.0.200"),expr(ipv4.destAddress.str() =~ "10.0.0.204"),expr(ipv4.destAddress.str() =~ "10.0.0.208"),expr(ipv4.destAddress.str() =~ "10.0.0.212"),expr(ipv4.destAddress.str() =~ "10.1.0.0"),expr(ipv4.destAddress.str() =~ "10.1.0.4"),expr(ipv4.destAddress.str() =~ "10.1.0.8"),expr(ipv4.destAddress.str() =~ "10.1.0.12"),expr(ipv4.destAddress.str() =~ "10.1.0.16"),expr(ipv4.destAddress.str() =~ "10.1.0.20"),expr(ipv4.destAddress.str() =~ "10.1.0.24"),expr(ipv4.destAddress.str() =~ "10.1.0.28"),expr(ipv4.destAddress.str() =~ "10.1.0.32"),expr(ipv4.destAddress.str() =~ "10.1.0.36"),expr(ipv4.destAddress.str() =~ "10.1.0.40"),expr(ipv4.destAddress.str() =~ "10.1.0.44"),expr(ipv4.destAddress.str() =~ "10.1.0.48"),expr(ipv4.destAddress.str() =~ "10.1.0.52"),expr(ipv4.destAddress.str() =~ "10.1.0.56"),expr(ipv4.destAddress.str() =~ "10.1.0.60"),expr(ipv4.destAddress.str() =~ "10.1.0.64"),expr(ipv4.destAddress.str() =~ "10.1.0.68"),expr(ipv4.destAddress.str() =~ "10.1.0.72"),expr(ipv4.destAddress.str() =~ "10.1.0.76"),expr(ipv4.destAddress.str() =~ "10.1.0.80"),expr(ipv4.destAddress.str() =~ "10.1.0.84"),expr(ipv4.destAddress.str() =~ "10.1.0.88"),expr(ipv4.destAddress.str() =~ "10.1.0.92"),expr(ipv4.destAddress.str() =~ "10.1.0.96"),expr(ipv4.destAddress.str() =~ "10.1.0.100"),expr(ipv4.destAddress.str() =~ "10.2.0.0"),expr(ipv4.destAddress.str() =~ "10.2.0.4"),expr(ipv4.destAddress.str() =~ "10.2.0.8"),expr(ipv4.destAddress.str() =~ "10.2.0.12"),expr(ipv4.destAddress.str() =~ "10.2.0.16"),expr(ipv4.destAddress.str() =~ "10.2.0.20"),expr(ipv4.destAddress.str() =~ "10.2.0.24"),expr(ipv4.destAddress.str() =~ "10.3.0.0"),expr(ipv4.destAddress.str() =~ "10.3.0.4"),expr(ipv4.destAddress.str() =~ "10.3.0.8"),expr(ipv4.destAddress.str() =~ "10.3.0.12"),expr(ipv4.destAddress.str() =~ "10.3.0.16"),expr(ipv4.destAddress.str() =~ "10.3.0.20"),expr(ipv4.destAddress.str() =~ "10.3.0.24"),expr(ipv4.destAddress.str() =~ "10.3.0.28"),expr(ipv4.destAddress.str() =~ "10.3.0.32"),expr(ipv4.destAddress.str() =~ "10.3.0.36"),expr(ipv4.destAddress.str() =~ "10.3.0.40"),expr(ipv4.destAddress.str() =~ "10.3.0.44"),expr(ipv4.destAddress.str() =~ "10.3.0.48"),expr(ipv4.destAddress.str() =~ "10.3.0.52"),expr(ipv4.destAddress.str() =~ "10.3.0.56"),expr(ipv4.destAddress.str() =~ "10.3.0.60"),expr(ipv4.destAddress.str() =~ "10.3.0.64"),expr(ipv4.destAddress.str() =~ "10.3.0.68"),expr(ipv4.destAddress.str() =~ "10.3.0.72"),expr(ipv4.destAddress.str() =~ "10.3.0.76"),expr(ipv4.destAddress.str() =~ "10.4.0.0"),expr(ipv4.destAddress.str() =~ "10.4.0.4"),expr(ipv4.destAddress.str() =~ "10.4.0.8"),expr(ipv4.destAddress.str() =~ "10.4.0.12"),expr(ipv4.destAddress.str() =~ "10.4.0.16"),expr(ipv4.destAddress.str() =~ "10.4.0.20"),expr(ipv4.destAddress.str() =~ "10.4.0.24"),expr(ipv4.destAddress.str() =~ "10.4.0.28"),expr(ipv4.destAddress.str() =~ "10.4.0.32"),expr(ipv4.destAddress.str() =~ "10.4.0.36"),expr(ipv4.destAddress.str() =~ "10.5.0.0"),expr(ipv4.destAddress.str() =~ "10.5.0.4"),expr(ipv4.destAddress.str() =~ "10.5.0.8"),expr(ipv4.destAddress.str() =~ "10.5.0.12"),expr(ipv4.destAddress.str() =~ "10.5.0.16"),expr(ipv4.destAddress.str() =~ "10.5.0.20"),expr(ipv4.destAddress.str() =~ "10.5.0.24"),expr(ipv4.destAddress.str() =~ "10.5.0.28"),expr(ipv4.destAddress.str() =~ "10.5.0.32")]

**.connFIX0.datarate = 100000000bps
**.connFIX0.delay = 40ms


[Config criticalVoIPtestQuatro2SlicesHTB_R100_Q35_M100_C100]
description = "Configuration for criticalVoIPtestQuatro2SlicesHTB_R100_Q35_M100_C100. All five applications. QoS employed. Guarantee Multiplier: 1.0; Ceil multiplier: 1.0"

extends = liteCbaselineTestTokenQoS_base

*.configurator.config = xmldoc("configs/routing/criticalVoIPtestQuatro2SlicesHTB_R100_Q35_M100_C100Routing.xml")

*.nVID = 54 # Number of video clients
*.nLVD = 26 # Number of live video client
*.nFDO = 7 # Number of file download clients
*.nSSH = 10 # Number of SSH clients
*.nVIP = 20 # Number of VoIP clients
*.ncVIP = 9 # Number of critical VoIP clients

*.router*.ppp[0].queue.typename = "HtbQueue"
*.router*.ppp[0].queue.numQueues = 126
*.router*.ppp[0].queue.queue[*].typename = "DropTailQueue"
*.router*.ppp[0].queue.packetCapacity = -1
*.router*.ppp[0].queue.htbHysterisis = false
*.router*.ppp[0].queue.scheduler.adjustHTBTreeValuesForCorectness = false
*.router*.ppp[0].queue.scheduler.checkHTBTreeValuesForCorectness = false
*.router*.ppp[0].queue.htbTreeConfig = xmldoc("configs/htbTree/criticalVoIPtestQuatro2SlicesHTB_R100_Q35_M100_C100HTB.xml")
*.router*.ppp[0].queue.classifier.defaultGateIndex = 0
*.router0.ppp[0].queue.classifier.packetFilters = [expr(ipv4.srcAddress.str() =~ "10.0.0.0"),expr(ipv4.srcAddress.str() =~ "10.0.0.4"),expr(ipv4.srcAddress.str() =~ "10.0.0.8"),expr(ipv4.srcAddress.str() =~ "10.0.0.12"),expr(ipv4.srcAddress.str() =~ "10.0.0.16"),expr(ipv4.srcAddress.str() =~ "10.0.0.20"),expr(ipv4.srcAddress.str() =~ "10.0.0.24"),expr(ipv4.srcAddress.str() =~ "10.0.0.28"),expr(ipv4.srcAddress.str() =~ "10.0.0.32"),expr(ipv4.srcAddress.str() =~ "10.0.0.36"),expr(ipv4.srcAddress.str() =~ "10.0.0.40"),expr(ipv4.srcAddress.str() =~ "10.0.0.44"),expr(ipv4.srcAddress.str() =~ "10.0.0.48"),expr(ipv4.srcAddress.str() =~ "10.0.0.52"),expr(ipv4.srcAddress.str() =~ "10.0.0.56"),expr(ipv4.srcAddress.str() =~ "10.0.0.60"),expr(ipv4.srcAddress.str() =~ "10.0.0.64"),expr(ipv4.srcAddress.str() =~ "10.0.0.68"),expr(ipv4.srcAddress.str() =~ "10.0.0.72"),expr(ipv4.srcAddress.str() =~ "10.0.0.76"),expr(ipv4.srcAddress.str() =~ "10.0.0.80"),expr(ipv4.srcAddress.str() =~ "10.0.0.84"),expr(ipv4.srcAddress.str() =~ "10.0.0.88"),expr(ipv4.srcAddress.str() =~ "10.0.0.92"),expr(ipv4.srcAddress.str() =~ "10.0.0.96"),expr(ipv4.srcAddress.str() =~ "10.0.0.100"),expr(ipv4.srcAddress.str() =~ "10.0.0.104"),expr(ipv4.srcAddress.str() =~ "10.0.0.108"),expr(ipv4.srcAddress.str() =~ "10.0.0.112"),expr(ipv4.srcAddress.str() =~ "10.0.0.116"),expr(ipv4.srcAddress.str() =~ "10.0.0.120"),expr(ipv4.srcAddress.str() =~ "10.0.0.124"),expr(ipv4.srcAddress.str() =~ "10.0.0.128"),expr(ipv4.srcAddress.str() =~ "10.0.0.132"),expr(ipv4.srcAddress.str() =~ "10.0.0.136"),expr(ipv4.srcAddress.str() =~ "10.0.0.140"),expr(ipv4.srcAddress.str() =~ "10.0.0.144"),expr(ipv4.srcAddress.str() =~ "10.0.0.148"),expr(ipv4.srcAddress.str() =~ "10.0.0.152"),expr(ipv4.srcAddress.str() =~ "10.0.0.156"),expr(ipv4.srcAddress.str() =~ "10.0.0.160"),expr(ipv4.srcAddress.str() =~ "10.0.0.164"),expr(ipv4.srcAddress.str() =~ "10.0.0.168"),expr(ipv4.srcAddress.str() =~ "10.0.0.172"),expr(ipv4.srcAddress.str() =~ "10.0.0.176"),expr(ipv4.srcAddress.str() =~ "10.0.0.180"),expr(ipv4.srcAddress.str() =~ "10.0.0.184"),expr(ipv4.srcAddress.str() =~ "10.0.0.188"),expr(ipv4.srcAddress.str() =~ "10.0.0.192"),expr(ipv4.srcAddress.str() =~ "10.0.0.196"),expr(ipv4.srcAddress.str() =~ "10.0.0.200"),expr(ipv4.srcAddress.str() =~ "10.0.0.204"),expr(ipv4.srcAddress.str() =~ "10.0.0.208"),expr(ipv4.srcAddress.str() =~ "10.0.0.212"),expr(ipv4.srcAddress.str() =~ "10.1.0.0"),expr(ipv4.srcAddress.str() =~ "10.1.0.4"),expr(ipv4.srcAddress.str() =~ "10.1.0.8"),expr(ipv4.srcAddress.str() =~ "10.1.0.12"),expr(ipv4.srcAddress.str() =~ "10.1.0.16"),expr(ipv4.srcAddress.str() =~ "10.1.0.20"),expr(ipv4.srcAddress.str() =~ "10.1.0.24"),expr(ipv4.srcAddress.str() =~ "10.1.0.28"),expr(ipv4.srcAddress.str() =~ "10.1.0.32"),expr(ipv4.srcAddress.str() =~ "10.1.0.36"),expr(ipv4.srcAddress.str() =~ "10.1.0.40"),expr(ipv4.srcAddress.str() =~ "10.1.0.44"),expr(ipv4.srcAddress.str() =~ "10.1.0.48"),expr(ipv4.srcAddress.str() =~ "10.1.0.52"),expr(ipv4.srcAddress.str() =~ "10.1.0.56"),expr(ipv4.srcAddress.str() =~ "10.1.0.60"),expr(ipv4.srcAddress.str() =~ "10.1.0.64"),expr(ipv4.srcAddress.str() =~ "10.1.0.68"),expr(ipv4.srcAddress.str() =~ "10.1.0.72"),expr(ipv4.srcAddress.str() =~ "10.1.0.76"),expr(ipv4.srcAddress.str() =~ "10.1.0.80"),expr(ipv4.srcAddress.str() =~ "10.1.0.84"),expr(ipv4.srcAddress.str() =~ "10.1.0.88"),expr(ipv4.srcAddress.str() =~ "10.1.0.92"),expr(ipv4.srcAddress.str() =~ "10.1.0.96"),expr(ipv4.srcAddress.str() =~ "10.1.0.100"),expr(ipv4.srcAddress.str() =~ "10.2.0.0"),expr(ipv4.srcAddress.str() =~ "10.2.0.4"),expr(ipv4.srcAddress.str() =~ "10.2.0.8"),expr(ipv4.srcAddress.str() =~ "10.2.0.12"),expr(ipv4.srcAddress.str() =~ "10.2.0.16"),expr(ipv4.srcAddress.str() =~ "10.2.0.20"),expr(ipv4.srcAddress.str() =~ "10.2.0.24"),expr(ipv4.srcAddress.str() =~ "10.3.0.0"),expr(ipv4.srcAddress.str() =~ "10.3.0.4"),expr(ipv4.srcAddress.str() =~ "10.3.0.8"),expr(ipv4.srcAddress.str() =~ "10.3.0.12"),expr(ipv4.srcAddress.str() =~ "10.3.0.16"),expr(ipv4.srcAddress.str() =~ "10.3.0.20"),expr(ipv4.srcAddress.str() =~ "10.3.0.24"),expr(ipv4.srcAddress.str() =~ "10.3.0.28"),expr(ipv4.srcAddress.str() =~ "10.3.0.32"),expr(ipv4.srcAddress.str() =~ "10.3.0.36"),expr(ipv4.srcAddress.str() =~ "10.3.0.40"),expr(ipv4.srcAddress.str() =~ "10.3.0.44"),expr(ipv4.srcAddress.str() =~ "10.3.0.48"),expr(ipv4.srcAddress.str() =~ "10.3.0.52"),expr(ipv4.srcAddress.str() =~ "10.3.0.56"),expr(ipv4.srcAddress.str() =~ "10.3.0.60"),expr(ipv4.srcAddress.str() =~ "10.3.0.64"),expr(ipv4.srcAddress.str() =~ "10.3.0.68"),expr(ipv4.srcAddress.str() =~ "10.3.0.72"),expr(ipv4.srcAddress.str() =~ "10.3.0.76"),expr(ipv4.srcAddress.str() =~ "10.4.0.0"),expr(ipv4.srcAddress.str() =~ "10.4.0.4"),expr(ipv4.srcAddress.str() =~ "10.4.0.8"),expr(ipv4.srcAddress.str() =~ "10.4.0.12"),expr(ipv4.srcAddress.str() =~ "10.4.0.16"),expr(ipv4.srcAddress.str() =~ "10.4.0.20"),expr(ipv4.srcAddress.str() =~ "10.4.0.24"),expr(ipv4.srcAddress.str() =~ "10.4.0.28"),expr(ipv4.srcAddress.str() =~ "10.4.0.32"),expr(ipv4.srcAddress.str() =~ "10.4.0.36"),expr(ipv4.srcAddress.str() =~ "10.5.0.0"),expr(ipv4.srcAddress.str() =~ "10.5.0.4"),expr(ipv4.srcAddress.str() =~ "10.5.0.8"),expr(ipv4.srcAddress.str() =~ "10.5.0.12"),expr(ipv4.srcAddress.str() =~ "10.5.0.16"),expr(ipv4.srcAddress.str() =~ "10.5.0.20"),expr(ipv4.srcAddress.str() =~ "10.5.0.24"),expr(ipv4.srcAddress.str() =~ "10.5.0.28"),expr(ipv4.srcAddress.str() =~ "10.5.0.32")]
*.router1.ppp[0].queue.classifier.packetFilters = [expr(ipv4.destAddress.str() =~ "10.0.0.0"),expr(ipv4.destAddress.str() =~ "10.0.0.4"),expr(ipv4.destAddress.str() =~ "10.0.0.8"),expr(ipv4.destAddress.str() =~ "10.0.0.12"),expr(ipv4.destAddress.str() =~ "10.0.0.16"),expr(ipv4.destAddress.str() =~ "10.0.0.20"),expr(ipv4.destAddress.str() =~ "10.0.0.24"),expr(ipv4.destAddress.str() =~ "10.0.0.28"),expr(ipv4.destAddress.str() =~ "10.0.0.32"),expr(ipv4.destAddress.str() =~ "10.0.0.36"),expr(ipv4.destAddress.str() =~ "10.0.0.40"),expr(ipv4.destAddress.str() =~ "10.0.0.44"),expr(ipv4.destAddress.str() =~ "10.0.0.48"),expr(ipv4.destAddress.str() =~ "10.0.0.52"),expr(ipv4.destAddress.str() =~ "10.0.0.56"),expr(ipv4.destAddress.str() =~ "10.0.0.60"),expr(ipv4.destAddress.str() =~ "10.0.0.64"),expr(ipv4.destAddress.str() =~ "10.0.0.68"),expr(ipv4.destAddress.str() =~ "10.0.0.72"),expr(ipv4.destAddress.str() =~ "10.0.0.76"),expr(ipv4.destAddress.str() =~ "10.0.0.80"),expr(ipv4.destAddress.str() =~ "10.0.0.84"),expr(ipv4.destAddress.str() =~ "10.0.0.88"),expr(ipv4.destAddress.str() =~ "10.0.0.92"),expr(ipv4.destAddress.str() =~ "10.0.0.96"),expr(ipv4.destAddress.str() =~ "10.0.0.100"),expr(ipv4.destAddress.str() =~ "10.0.0.104"),expr(ipv4.destAddress.str() =~ "10.0.0.108"),expr(ipv4.destAddress.str() =~ "10.0.0.112"),expr(ipv4.destAddress.str() =~ "10.0.0.116"),expr(ipv4.destAddress.str() =~ "10.0.0.120"),expr(ipv4.destAddress.str() =~ "10.0.0.124"),expr(ipv4.destAddress.str() =~ "10.0.0.128"),expr(ipv4.destAddress.str() =~ "10.0.0.132"),expr(ipv4.destAddress.str() =~ "10.0.0.136"),expr(ipv4.destAddress.str() =~ "10.0.0.140"),expr(ipv4.destAddress.str() =~ "10.0.0.144"),expr(ipv4.destAddress.str() =~ "10.0.0.148"),expr(ipv4.destAddress.str() =~ "10.0.0.152"),expr(ipv4.destAddress.str() =~ "10.0.0.156"),expr(ipv4.destAddress.str() =~ "10.0.0.160"),expr(ipv4.destAddress.str() =~ "10.0.0.164"),expr(ipv4.destAddress.str() =~ "10.0.0.168"),expr(ipv4.destAddress.str() =~ "10.0.0.172"),expr(ipv4.destAddress.str() =~ "10.0.0.176"),expr(ipv4.destAddress.str() =~ "10.0.0.180"),expr(ipv4.destAddress.str() =~ "10.0.0.184"),expr(ipv4.destAddress.str() =~ "10.0.0.188"),expr(ipv4.destAddress.str() =~ "10.0.0.192"),expr(ipv4.destAddress.str() =~ "10.0.0.196"),expr(ipv4.destAddress.str() =~ "10.0.0.200"),expr(ipv4.destAddress.str() =~ "10.0.0.204"),expr(ipv4.destAddress.str() =~ "10.0.0.208"),expr(ipv4.destAddress.str() =~ "10.0.0.212"),expr(ipv4.destAddress.str() =~ "10.1.0.0"),expr(ipv4.destAddress.str() =~ "10.1.0.4"),expr(ipv4.destAddress.str() =~ "10.1.0.8"),expr(ipv4.destAddress.str() =~ "10.1.0.12"),expr(ipv4.destAddress.str() =~ "10.1.0.16"),expr(ipv4.destAddress.str() =~ "10.1.0.20"),expr(ipv4.destAddress.str() =~ "10.1.0.24"),expr(ipv4.destAddress.str() =~ "10.1.0.28"),expr(ipv4.destAddress.str() =~ "10.1.0.32"),expr(ipv4.destAddress.str() =~ "10.1.0.36"),expr(ipv4.destAddress.str() =~ "10.1.0.40"),expr(ipv4.destAddress.str() =~ "10.1.0.44"),expr(ipv4.destAddress.str() =~ "10.1.0.48"),expr(ipv4.destAddress.str() =~ "10.1.0.52"),expr(ipv4.destAddress.str() =~ "10.1.0.56"),expr(ipv4.destAddress.str() =~ "10.1.0.60"),expr(ipv4.destAddress.str() =~ "10.1.0.64"),expr(ipv4.destAddress.str() =~ "10.1.0.68"),expr(ipv4.destAddress.str() =~ "10.1.0.72"),expr(ipv4.destAddress.str() =~ "10.1.0.76"),expr(ipv4.destAddress.str() =~ "10.1.0.80"),expr(ipv4.destAddress.str() =~ "10.1.0.84"),expr(ipv4.destAddress.str() =~ "10.1.0.88"),expr(ipv4.destAddress.str() =~ "10.1.0.92"),expr(ipv4.destAddress.str() =~ "10.1.0.96"),expr(ipv4.destAddress.str() =~ "10.1.0.100"),expr(ipv4.destAddress.str() =~ "10.2.0.0"),expr(ipv4.destAddress.str() =~ "10.2.0.4"),expr(ipv4.destAddress.str() =~ "10.2.0.8"),expr(ipv4.destAddress.str() =~ "10.2.0.12"),expr(ipv4.destAddress.str() =~ "10.2.0.16"),expr(ipv4.destAddress.str() =~ "10.2.0.20"),expr(ipv4.destAddress.str() =~ "10.2.0.24"),expr(ipv4.destAddress.str() =~ "10.3.0.0"),expr(ipv4.destAddress.str() =~ "10.3.0.4"),expr(ipv4.destAddress.str() =~ "10.3.0.8"),expr(ipv4.destAddress.str() =~ "10.3.0.12"),expr(ipv4.destAddress.str() =~ "10.3.0.16"),expr(ipv4.destAddress.str() =~ "10.3.0.20"),expr(ipv4.destAddress.str() =~ "10.3.0.24"),expr(ipv4.destAddress.str() =~ "10.3.0.28"),expr(ipv4.destAddress.str() =~ "10.3.0.32"),expr(ipv4.destAddress.str() =~ "10.3.0.36"),expr(ipv4.destAddress.str() =~ "10.3.0.40"),expr(ipv4.destAddress.str() =~ "10.3.0.44"),expr(ipv4.destAddress.str() =~ "10.3.0.48"),expr(ipv4.destAddress.str() =~ "10.3.0.52"),expr(ipv4.destAddress.str() =~ "10.3.0.56"),expr(ipv4.destAddress.str() =~ "10.3.0.60"),expr(ipv4.destAddress.str() =~ "10.3.0.64"),expr(ipv4.destAddress.str() =~ "10.3.0.68"),expr(ipv4.destAddress.str() =~ "10.3.0.72"),expr(ipv4.destAddress.str() =~ "10.3.0.76"),expr(ipv4.destAddress.str() =~ "10.4.0.0"),expr(ipv4.destAddress.str() =~ "10.4.0.4"),expr(ipv4.destAddress.str() =~ "10.4.0.8"),expr(ipv4.destAddress.str() =~ "10.4.0.12"),expr(ipv4.destAddress.str() =~ "10.4.0.16"),expr(ipv4.destAddress.str() =~ "10.4.0.20"),expr(ipv4.destAddress.str() =~ "10.4.0.24"),expr(ipv4.destAddress.str() =~ "10.4.0.28"),expr(ipv4.destAddress.str() =~ "10.4.0.32"),expr(ipv4.destAddress.str() =~ "10.4.0.36"),expr(ipv4.destAddress.str() =~ "10.5.0.0"),expr(ipv4.destAddress.str() =~ "10.5.0.4"),expr(ipv4.destAddress.str() =~ "10.5.0.8"),expr(ipv4.destAddress.str() =~ "10.5.0.12"),expr(ipv4.destAddress.str() =~ "10.5.0.16"),expr(ipv4.destAddress.str() =~ "10.5.0.20"),expr(ipv4.destAddress.str() =~ "10.5.0.24"),expr(ipv4.destAddress.str() =~ "10.5.0.28"),expr(ipv4.destAddress.str() =~ "10.5.0.32")]

**.connFIX0.datarate = 100000000bps
**.connFIX0.delay = 10ms

[Config heatMapTest_VoIP_scalability1]
network = baselineTestV3

sim-time-limit=40s

output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed"

*.nVID = 0 # Number of video clients
*.nFDO = 0 # Number of file download clients
*.nSSH = 0 # Number of SSH clients
*.nVIP = 1 # Number of VoIP clients

# VoIP receiver
**.hostVIP[*].numApps = 1
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver"
**.hostVIP[*].app[0].localPort = 2000
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio
**.hostVIP[*].app[0].playoutDelay = 0s # initial delay for beginning playout after receiving the first packet
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet)

# VoIP sender
**.serverVIP.numApps = parent.nVIP
**.serverVIP.app[*].typename = "SimpleVoipSender"
**.serverVIP.app[*].localPort = -1
**.serverVIP.app[*].destPort = 2000
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]"
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s)
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s)
**.serverVIP.app[*].packetizationInterval = 2ms #20ms # interval between sending voice packets
**.serverVIP.app[*].startTime = 0.01s # time of start sending
**.serverVIP.app[*].stopTime = 10s # time of end of sending, -1 means forever

*.server*.numApps = 0
*.host*.numApps = 0

**.conn1.datarate = ${TP=5,6,7,8,9,1,11,12,13,14,15,16,17,18,19,2,21,22,23,24,25,26,27,28,29,3,31,32,33,34,35,36,37,38,39,4,41,42,43,44,45,46,47,48,49,5,51,52,53,54,55}kbps
**.conn1.delay = ${del=0,20,40,60,80,100,120,140,160,180,200,220,240,260,280,300,320,340,360,380,400,420,440,460,480,500,520,540,560,580,600,620,640,660,680,700,720,740,760,780,800,820,840,860,880,900,920,940,960,980}ms



[Config heatMapTest_VoIP_scalability10]
network = baselineTestV3

sim-time-limit=40s

output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed"

*.nVID = 0 # Number of video clients
*.nFDO = 0 # Number of file download clients
*.nSSH = 0 # Number of SSH clients
*.nVIP = 10 # Number of VoIP clients

# VoIP receiver
**.hostVIP[*].numApps = 1
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver"
**.hostVIP[*].app[0].localPort = 2000
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio
**.hostVIP[*].app[0].playoutDelay = 0s # initial delay for beginning playout after receiving the first packet
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet)

# VoIP sender
**.serverVIP.numApps = parent.nVIP
**.serverVIP.app[*].typename = "SimpleVoipSender"
**.serverVIP.app[*].localPort = -1
**.serverVIP.app[*].destPort = 2000
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]"
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s)
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s)
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets
**.serverVIP.app[*].startTime = 0.01s # time of start sending
**.serverVIP.app[*].stopTime = 10s # time of end of sending, -1 means forever

*.server*.numApps = 0
*.host*.numApps = 0

**.conn1.datarate = ${TP=50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200,210,220,230,240,250,260,270,280,290,300,310,320,330,340,350,360,370,380,390,400,410,420,430,440,450,460,470,480,490,500,510,520,530,540,550}kbps
**.conn1.delay = ${del=0,20,40,60,80,100,120,140,160,180,200,220,240,260,280,300,320,340,360,380,400,420,440,460,480,500,520,540,560,580,600,620,640,660,680,700,720,740,760,780,800,820,840,860,880,900,920,940,960,980}ms


[Config heatMapTest_VoIP_scalability100]
network = baselineTestV3

sim-time-limit=40s

output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed"

*.nVID = 0 # Number of video clients
*.nFDO = 0 # Number of file download clients
*.nSSH = 0 # Number of SSH clients
*.nVIP = 100 # Number of VoIP clients

# VoIP receiver
**.hostVIP[*].numApps = 1
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver"
**.hostVIP[*].app[0].localPort = 2000
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio
**.hostVIP[*].app[0].playoutDelay = 0s # initial delay for beginning playout after receiving the first packet
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet)

# VoIP sender
**.serverVIP.numApps = parent.nVIP
**.serverVIP.app[*].typename = "SimpleVoipSender"
**.serverVIP.app[*].localPort = -1
**.serverVIP.app[*].destPort = 2000
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]"
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s)
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s)
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets
**.serverVIP.app[*].startTime = 0.01s # time of start sending
**.serverVIP.app[*].stopTime = 10s # time of end of sending, -1 means forever

*.server*.numApps = 0
*.host*.numApps = 0

**.conn1.datarate = ${TP=500,600,700,800,900,1000,1100,1200,1300,1400,1500,1600,1700,1800,1900,2000,2100,2200,2300,2400,2500,2600,2700,2800,2900,3000,3100,3200,3300,3400,3500,3600,3700,3800,3900,4000,4100,4200,4300,4400,4500,4600,4700,4800,4900,5000,5100,5200,5300,5400,5500}kbps
**.conn1.delay = ${del=0,20,40,60,80,100,120,140,160,180,200,220,240,260,280,300,320,340,360,380,400,420,440,460,480,500,520,540,560,580,600,620,640,660,680,700,720,740,760,780,800,820,840,860,880,900,920,940,960,980}ms


[Config heatMapTest_VoIP_scalability10s10old]
network = baselineTestV3

sim-time-limit=40s

output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed"

*.nVID = 0 # Number of video clients
*.nFDO = 0 # Number of file download clients
*.nSSH = 0 # Number of SSH clients
*.nVIP = 10 # Number of VoIP clients

# VoIP receiver
**.hostVIP[*].numApps = 1
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver"
**.hostVIP[*].app[0].localPort = 2000
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio
**.hostVIP[*].app[0].playoutDelay = 0s # initial delay for beginning playout after receiving the first packet
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet)

# VoIP sender
**.serverVIP.numApps = parent.nVIP
**.serverVIP.app[*].typename = "SimpleVoipSender"
**.serverVIP.app[*].localPort = -1
**.serverVIP.app[*].destPort = 2000
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]"
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s)
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s)
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets
**.serverVIP.app[*].startTime = uniform(0.01s,10s) # time of start sending
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever

*.server*.numApps = 0
*.host*.numApps = 0

**.conn1.datarate = ${TP=50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200,210,220,230,240,250,260,270,280,290,300,310,320,330,340,350,360,370,380,390,400,410,420,430,440,450,460,470,480,490,500,510,520,530,540,550}kbps
**.conn1.delay = ${del=0,20,40,60,80,100,120,140,160,180,200,220,240,260,280,300,320,340,360,380,400,420,440,460,480,500,520,540,560,580,600,620,640,660,680,700,720,740,760,780,800,820,840,860,880,900,920,940,960,980}ms

[Config heatMapTest_VoIP_scalability1s10old]
network = baselineTestV3
warmup-period = 10s
sim-time-limit=40s

output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed"

*.nVID = 0 # Number of video clients
*.nFDO = 0 # Number of file download clients
*.nSSH = 0 # Number of SSH clients
*.nVIP = 10 # Number of VoIP clients

# VoIP receiver
**.hostVIP[*].numApps = 1
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver"
**.hostVIP[*].app[0].localPort = 2000
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio
**.hostVIP[*].app[0].playoutDelay = 0s # initial delay for beginning playout after receiving the first packet
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet)

# VoIP sender
**.serverVIP.numApps = parent.nVIP
**.serverVIP.app[*].typename = "SimpleVoipSender"
**.serverVIP.app[*].localPort = -1
**.serverVIP.app[*].destPort = 2000
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]"
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s)
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s)
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets
**.serverVIP.app[*].startTime =  uniform(0.01s,1s) # time of start sending
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever

*.server*.numApps = 0
*.host*.numApps = 0

**.conn1.datarate = ${TP=50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200,210,220,230,240,250,260,270,280,290,300,310,320,330,340,350,360,370,380,390,400,410,420,430,440,450,460,470,480,490,500,510,520,530,540,550}kbps
**.conn1.delay = ${del=0,20,40,60,80,100,120,140,160,180,200,220,240,260,280,300,320,340,360,380,400,420,440,460,480,500,520,540,560,580,600,620,640,660,680,700,720,740,760,780,800,820,840,860,880,900,920,940,960,980}ms


[Config heatMapTest_VoIP_scalability1s10]
network = baselineTestV3
warmup-period = 10s
sim-time-limit=80s

output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed"

*.nVID = 0 # Number of video clients
*.nFDO = 0 # Number of file download clients
*.nSSH = 0 # Number of SSH clients
*.nVIP = 10 # Number of VoIP clients

# VoIP receiver
**.hostVIP[*].numApps = 1
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver"
**.hostVIP[*].app[0].localPort = 2000
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio
**.hostVIP[*].app[0].playoutDelay = 20ms # initial delay for beginning playout after receiving the first packet
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet)

# VoIP sender
**.serverVIP.numApps = parent.nVIP
**.serverVIP.app[*].typename = "SimpleVoipSender"
**.serverVIP.app[*].localPort = -1
**.serverVIP.app[*].destPort = 2000
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]"
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s)
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s)
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets
**.serverVIP.app[*].startTime =  uniform(0s,1s) # time of start sending
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever

*.server*.numApps = 0
*.host*.numApps = 0

**.conn1.datarate = ${TP=50..300 step 10}kbps
#**.conn1.delay = 20ms
**.conn1.delay = ${del=20}ms



[Config heatMapTest_VoIP_scalability10s10]
network = baselineTestV3
warmup-period = 10s
sim-time-limit=80s

output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed"

*.nVID = 0 # Number of video clients
*.nFDO = 0 # Number of file download clients
*.nSSH = 0 # Number of SSH clients
*.nVIP = 10 # Number of VoIP clients

# VoIP receiver
**.hostVIP[*].numApps = 1
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver"
**.hostVIP[*].app[0].localPort = 2000
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio
**.hostVIP[*].app[0].playoutDelay = 20ms # initial delay for beginning playout after receiving the first packet
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet)

# VoIP sender
**.serverVIP.numApps = parent.nVIP
**.serverVIP.app[*].typename = "SimpleVoipSender"
**.serverVIP.app[*].localPort = -1
**.serverVIP.app[*].destPort = 2000
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]"
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s)
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s)
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets
**.serverVIP.app[*].startTime = uniform(0s,10s) # time of start sending
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever

*.server*.numApps = 0
*.host*.numApps = 0

**.conn1.datarate = ${TP=50..300 step 10}kbps
**.conn1.delay = ${del=20}ms
#**.conn1.delay = 20ms



[Config heatMapTest_VoIP_scalability1s1]
network = baselineTestV3
warmup-period = 10s
sim-time-limit=80s

output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed"

*.nVID = 0 # Number of video clients
*.nFDO = 0 # Number of file download clients
*.nSSH = 0 # Number of SSH clients
*.nVIP = 1 # Number of VoIP clients

# VoIP receiver
**.hostVIP[*].numApps = 1
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver"
**.hostVIP[*].app[0].localPort = 2000
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio
**.hostVIP[*].app[0].playoutDelay = 20ms # initial delay for beginning playout after receiving the first packet
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet)

# VoIP sender
**.serverVIP.numApps = parent.nVIP
**.serverVIP.app[*].typename = "SimpleVoipSender"
**.serverVIP.app[*].localPort = -1
**.serverVIP.app[*].destPort = 2000
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]"
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s)
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s)
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets
**.serverVIP.app[*].startTime =  uniform(0s,1s) # time of start sending
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever

*.server*.numApps = 0
*.host*.numApps = 0

**.conn1.datarate = ${TP=5..30 step 1}kbps
#**.conn1.delay = 20ms
**.conn1.delay = ${del=20}ms



[Config heatMapTest_VoIP_scalability10s1]
network = baselineTestV3
warmup-period = 10s
sim-time-limit=80s

output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed"

*.nVID = 0 # Number of video clients
*.nFDO = 0 # Number of file download clients
*.nSSH = 0 # Number of SSH clients
*.nVIP = 1 # Number of VoIP clients

# VoIP receiver
**.hostVIP[*].numApps = 1
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver"
**.hostVIP[*].app[0].localPort = 2000
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio
**.hostVIP[*].app[0].playoutDelay = 20ms # initial delay for beginning playout after receiving the first packet
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet)

# VoIP sender
**.serverVIP.numApps = parent.nVIP
**.serverVIP.app[*].typename = "SimpleVoipSender"
**.serverVIP.app[*].localPort = -1
**.serverVIP.app[*].destPort = 2000
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]"
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s)
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s)
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets
**.serverVIP.app[*].startTime = uniform(0s,10s) # time of start sending
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever

*.server*.numApps = 0
*.host*.numApps = 0

**.conn1.datarate = ${TP=5..30 step 1}kbps
**.conn1.delay = ${del=20}ms
#**.conn1.delay = 20ms


[Config heatMapTest_VoIP_scalability1s100Queue10000]
network = baselineTestV3
warmup-period = 10s
sim-time-limit=80s

output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed"

*.nVID = 0 # Number of video clients
*.nFDO = 0 # Number of file download clients
*.nSSH = 0 # Number of SSH clients
*.nVIP = 100 # Number of VoIP clients

# VoIP receiver
**.hostVIP[*].numApps = 1
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver"
**.hostVIP[*].app[0].localPort = 2000
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio
**.hostVIP[*].app[0].playoutDelay = 20ms # initial delay for beginning playout after receiving the first packet
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet)

# VoIP sender
**.serverVIP.numApps = parent.nVIP
**.serverVIP.app[*].typename = "SimpleVoipSender"
**.serverVIP.app[*].localPort = -1
**.serverVIP.app[*].destPort = 2000
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]"
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s)
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s)
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets
**.serverVIP.app[*].startTime =  uniform(0s,1s) # time of start sending
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever

*.server*.numApps = 0
*.host*.numApps = 0

**.conn1.datarate = ${TP=500..3000 step 100}kbps
#**.conn1.delay = 20ms
**.conn1.delay = ${del=20}ms



[Config heatMapTest_VoIP_scalability10s100Queue10000]
network = baselineTestV3
warmup-period = 10s
sim-time-limit=80s

output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed"

*.nVID = 0 # Number of video clients
*.nFDO = 0 # Number of file download clients
*.nSSH = 0 # Number of SSH clients
*.nVIP = 100 # Number of VoIP clients

# VoIP receiver
**.hostVIP[*].numApps = 1
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver"
**.hostVIP[*].app[0].localPort = 2000
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio
**.hostVIP[*].app[0].playoutDelay = 20ms # initial delay for beginning playout after receiving the first packet
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet)

# VoIP sender
**.serverVIP.numApps = parent.nVIP
**.serverVIP.app[*].typename = "SimpleVoipSender"
**.serverVIP.app[*].localPort = -1
**.serverVIP.app[*].destPort = 2000
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]"
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s)
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s)
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets
**.serverVIP.app[*].startTime = uniform(0s,10s) # time of start sending
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever

*.server*.numApps = 0
*.host*.numApps = 0

**.conn1.datarate = ${TP=500..3000 step 100}kbps
**.conn1.delay = ${del=20}ms
#**.conn1.delay = 20ms


#opp_run -u Cmdenv -c heatMapTest_VoIP_scalability10s10 -l ../../inet/src/INET -l ../../inet-gpl/src/INETGPL -l ../improved5gNS -n .:../src:../../inet/src:../../inet-gpl/src omnetpp.ini


[Config heatMapTest_VoIP_scalability1s100Queue500]
network = baselineTestV3
warmup-period = 10s
sim-time-limit=160s
**.packetCapacity = 500

output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed"

*.nVID = 0 # Number of video clients
*.nFDO = 0 # Number of file download clients
*.nSSH = 0 # Number of SSH clients
*.nVIP = 100 # Number of VoIP clients

# VoIP receiver
**.hostVIP[*].numApps = 1
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver"
**.hostVIP[*].app[0].localPort = 2000
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio
**.hostVIP[*].app[0].playoutDelay = 20ms # initial delay for beginning playout after receiving the first packet
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet)

# VoIP sender
**.serverVIP.numApps = parent.nVIP
**.serverVIP.app[*].typename = "SimpleVoipSender"
**.serverVIP.app[*].localPort = -1
**.serverVIP.app[*].destPort = 2000
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]"
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s)
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s)
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets
**.serverVIP.app[*].startTime =  uniform(0s,1s) # time of start sending
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever

*.server*.numApps = 0
*.host*.numApps = 0

**.conn1.datarate = ${TP=500..3000 step 100}kbps
#**.conn1.delay = 20ms
**.conn1.delay = ${del=20}ms



[Config heatMapTest_VoIP_scalability10s10Queue10000]
network = baselineTestV3
warmup-period = 10s
sim-time-limit=80s

output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed"

*.nVID = 0 # Number of video clients
*.nFDO = 0 # Number of file download clients
*.nSSH = 0 # Number of SSH clients
*.nVIP = 10 # Number of VoIP clients

# VoIP receiver
**.hostVIP[*].numApps = 1
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver"
**.hostVIP[*].app[0].localPort = 2000
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio
**.hostVIP[*].app[0].playoutDelay = 20ms # initial delay for beginning playout after receiving the first packet
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet)

# VoIP sender
**.serverVIP.numApps = parent.nVIP
**.serverVIP.app[*].typename = "SimpleVoipSender"
**.serverVIP.app[*].localPort = -1
**.serverVIP.app[*].destPort = 2000
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]"
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s)
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s)
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets
**.serverVIP.app[*].startTime = uniform(0s,10s) # time of start sending
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever

*.server*.numApps = 0
*.host*.numApps = 0

**.conn1.datarate = ${TP=50..300 step 10}kbps
**.conn1.delay = ${del=20}ms
#**.conn1.delay = 20ms




[Config heatMapTest_VoIP_scalability10s1Queue10000]
network = baselineTestV3
warmup-period = 10s
sim-time-limit=80s

output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed"

*.nVID = 0 # Number of video clients
*.nFDO = 0 # Number of file download clients
*.nSSH = 0 # Number of SSH clients
*.nVIP = 1 # Number of VoIP clients

# VoIP receiver
**.hostVIP[*].numApps = 1
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver"
**.hostVIP[*].app[0].localPort = 2000
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio
**.hostVIP[*].app[0].playoutDelay = 20ms # initial delay for beginning playout after receiving the first packet
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet)

# VoIP sender
**.serverVIP.numApps = parent.nVIP
**.serverVIP.app[*].typename = "SimpleVoipSender"
**.serverVIP.app[*].localPort = -1
**.serverVIP.app[*].destPort = 2000
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]"
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s)
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s)
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets
**.serverVIP.app[*].startTime = uniform(0s,10s) # time of start sending
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever

*.server*.numApps = 0
*.host*.numApps = 0

**.conn1.datarate = ${TP=5..30 step 1}kbps
**.conn1.delay = ${del=20}ms
#**.conn1.delay = 20ms


[Config heatMapTestSSH_scale1]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 2*${del}*${TP} < 12000000 ?  12000000b : 2*${del}*${TP}b 

sim-time-limit=400s 

*.nSSH = 1 # Number of SSH clients 
*.nVID = 0 # Number of video clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# Remote Shell Client
**.hostSSH[*].numApps = 1
**.hostSSH[*].app[0].typename = "TcpSimpleSshAppV2lite"
**.hostSSH[*].app[0].localAddress = "" # local address or empty ("") 
**.hostSSH[*].app[0].localPort = -1 # local port number 
**.hostSSH[*].app[0].connectAddress = "serverSSH" # server address (may be symbolic)
**.hostSSH[*].app[0].connectPort = 22  # port number to connect to 
**.hostSSH[*].app[0].startTime = 0.01s # time first session begins 
**.hostSSH[*].app[0].stopTime = 100s # time of finishing sending, negative values mean forever 
**.hostSSH[*].app[0].numCommands = 1 # user types this many commands in a session 
**.hostSSH[*].app[0].commandLength = 10B # commands are this many characters (plus Enter) 
**.hostSSH[*].app[0].keyPressDelay = 0.05s # delay between keypresses 
**.hostSSH[*].app[0].commandOutputLength = 500B # commands produce this much output 
**.hostSSH[*].app[0].thinkTime = 1s # user waits this much before starting to type new command
**.hostSSH[*].app[0].idleInterval = 100s # time gap between sessions 
**.hostSSH[*].app[0].reconnectInterval = 1s # if connection breaks, user waits this much before trying to reconnect 
**.hostSSH[*].app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
**.hostSSH[*].app[0].stopOperationTimeout = 2s # timeout value for lifecycle stop operation 

# SSH server 
*.serverSSH.numApps = 1 
*.serverSSH.app[*].typename = "TcpGenericServerApp"
*.serverSSH.app[*].localAddress = "" # local address; may be left empty ("") 
*.serverSSH.app[*].localPort = 22 # localPort number to listen on 
*.serverSSH.app[*].replyDelay = 0s 
*.serverSSH.app[*].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverSSH.app[*].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=5..10 step 1}kbps 
**.conn1.delay = ${del=20}ms 

[Config heatMapTestSSH_scale5]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 2*${del}*${TP} < 12000000 ?  12000000b : 2*${del}*${TP}b 

sim-time-limit=400s 

*.nSSH = 5 # Number of SSH clients 
*.nVID = 0 # Number of video clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# Remote Shell Client
**.hostSSH[*].numApps = 1
**.hostSSH[*].app[0].typename = "TcpSimpleSshAppV2lite"
**.hostSSH[*].app[0].localAddress = "" # local address or empty ("") 
**.hostSSH[*].app[0].localPort = -1 # local port number 
**.hostSSH[*].app[0].connectAddress = "serverSSH" # server address (may be symbolic)
**.hostSSH[*].app[0].connectPort = 22  # port number to connect to 
**.hostSSH[*].app[0].startTime = 0.01s # time first session begins 
**.hostSSH[*].app[0].stopTime = 100s # time of finishing sending, negative values mean forever 
**.hostSSH[*].app[0].numCommands = 1 # user types this many commands in a session 
**.hostSSH[*].app[0].commandLength = 10B # commands are this many characters (plus Enter) 
**.hostSSH[*].app[0].keyPressDelay = 0.05s # delay between keypresses 
**.hostSSH[*].app[0].commandOutputLength = 500B # commands produce this much output 
**.hostSSH[*].app[0].thinkTime = 1s # user waits this much before starting to type new command
**.hostSSH[*].app[0].idleInterval = 100s # time gap between sessions 
**.hostSSH[*].app[0].reconnectInterval = 1s # if connection breaks, user waits this much before trying to reconnect 
**.hostSSH[*].app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
**.hostSSH[*].app[0].stopOperationTimeout = 2s # timeout value for lifecycle stop operation 

# SSH server 
*.serverSSH.numApps = 1 
*.serverSSH.app[*].typename = "TcpGenericServerApp"
*.serverSSH.app[*].localAddress = "" # local address; may be left empty ("") 
*.serverSSH.app[*].localPort = 22 # localPort number to listen on 
*.serverSSH.app[*].replyDelay = 0s 
*.serverSSH.app[*].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverSSH.app[*].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=25..50 step 5}kbps 
**.conn1.delay = ${del=20}ms 

[Config heatMapTestSSH_scale10]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 2*${del}*${TP} < 12000000 ?  12000000b : 2*${del}*${TP}b 

sim-time-limit=400s 

*.nSSH = 10 # Number of SSH clients 
*.nVID = 0 # Number of video clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# Remote Shell Client
**.hostSSH[*].numApps = 1
**.hostSSH[*].app[0].typename = "TcpSimpleSshAppV2lite"
**.hostSSH[*].app[0].localAddress = "" # local address or empty ("") 
**.hostSSH[*].app[0].localPort = -1 # local port number 
**.hostSSH[*].app[0].connectAddress = "serverSSH" # server address (may be symbolic)
**.hostSSH[*].app[0].connectPort = 22  # port number to connect to 
**.hostSSH[*].app[0].startTime = 0.01s # time first session begins 
**.hostSSH[*].app[0].stopTime = 100s # time of finishing sending, negative values mean forever 
**.hostSSH[*].app[0].numCommands = 1 # user types this many commands in a session 
**.hostSSH[*].app[0].commandLength = 10B # commands are this many characters (plus Enter) 
**.hostSSH[*].app[0].keyPressDelay = 0.05s # delay between keypresses 
**.hostSSH[*].app[0].commandOutputLength = 500B # commands produce this much output 
**.hostSSH[*].app[0].thinkTime = 1s # user waits this much before starting to type new command
**.hostSSH[*].app[0].idleInterval = 100s # time gap between sessions 
**.hostSSH[*].app[0].reconnectInterval = 1s # if connection breaks, user waits this much before trying to reconnect 
**.hostSSH[*].app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
**.hostSSH[*].app[0].stopOperationTimeout = 2s # timeout value for lifecycle stop operation 

# SSH server 
*.serverSSH.numApps = 1 
*.serverSSH.app[*].typename = "TcpGenericServerApp"
*.serverSSH.app[*].localAddress = "" # local address; may be left empty ("") 
*.serverSSH.app[*].localPort = 22 # localPort number to listen on 
*.serverSSH.app[*].replyDelay = 0s 
*.serverSSH.app[*].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverSSH.app[*].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=50..100 step 10}kbps 
**.conn1.delay = ${del=20}ms 

[Config heatMapTestSSH_scale50]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 2*${del}*${TP} < 12000000 ?  12000000b : 2*${del}*${TP}b 

sim-time-limit=400s 

*.nSSH = 50 # Number of SSH clients 
*.nVID = 0 # Number of video clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# Remote Shell Client
**.hostSSH[*].numApps = 1
**.hostSSH[*].app[0].typename = "TcpSimpleSshAppV2lite"
**.hostSSH[*].app[0].localAddress = "" # local address or empty ("") 
**.hostSSH[*].app[0].localPort = -1 # local port number 
**.hostSSH[*].app[0].connectAddress = "serverSSH" # server address (may be symbolic)
**.hostSSH[*].app[0].connectPort = 22  # port number to connect to 
**.hostSSH[*].app[0].startTime = 0.01s # time first session begins 
**.hostSSH[*].app[0].stopTime = 100s # time of finishing sending, negative values mean forever 
**.hostSSH[*].app[0].numCommands = 1 # user types this many commands in a session 
**.hostSSH[*].app[0].commandLength = 10B # commands are this many characters (plus Enter) 
**.hostSSH[*].app[0].keyPressDelay = 0.05s # delay between keypresses 
**.hostSSH[*].app[0].commandOutputLength = 500B # commands produce this much output 
**.hostSSH[*].app[0].thinkTime = 1s # user waits this much before starting to type new command
**.hostSSH[*].app[0].idleInterval = 100s # time gap between sessions 
**.hostSSH[*].app[0].reconnectInterval = 1s # if connection breaks, user waits this much before trying to reconnect 
**.hostSSH[*].app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
**.hostSSH[*].app[0].stopOperationTimeout = 2s # timeout value for lifecycle stop operation 

# SSH server 
*.serverSSH.numApps = 1 
*.serverSSH.app[*].typename = "TcpGenericServerApp"
*.serverSSH.app[*].localAddress = "" # local address; may be left empty ("") 
*.serverSSH.app[*].localPort = 22 # localPort number to listen on 
*.serverSSH.app[*].replyDelay = 0s 
*.serverSSH.app[*].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverSSH.app[*].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=250..500 step 50}kbps 
**.conn1.delay = ${del=20}ms 

[Config heatMapTestSSH_scale100]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 2*${del}*${TP} < 12000000 ?  12000000b : 2*${del}*${TP}b 

sim-time-limit=400s 

*.nSSH = 100 # Number of SSH clients 
*.nVID = 0 # Number of video clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# Remote Shell Client
**.hostSSH[*].numApps = 1
**.hostSSH[*].app[0].typename = "TcpSimpleSshAppV2lite"
**.hostSSH[*].app[0].localAddress = "" # local address or empty ("") 
**.hostSSH[*].app[0].localPort = -1 # local port number 
**.hostSSH[*].app[0].connectAddress = "serverSSH" # server address (may be symbolic)
**.hostSSH[*].app[0].connectPort = 22  # port number to connect to 
**.hostSSH[*].app[0].startTime = 0.01s # time first session begins 
**.hostSSH[*].app[0].stopTime = 100s # time of finishing sending, negative values mean forever 
**.hostSSH[*].app[0].numCommands = 1 # user types this many commands in a session 
**.hostSSH[*].app[0].commandLength = 10B # commands are this many characters (plus Enter) 
**.hostSSH[*].app[0].keyPressDelay = 0.05s # delay between keypresses 
**.hostSSH[*].app[0].commandOutputLength = 500B # commands produce this much output 
**.hostSSH[*].app[0].thinkTime = 1s # user waits this much before starting to type new command
**.hostSSH[*].app[0].idleInterval = 100s # time gap between sessions 
**.hostSSH[*].app[0].reconnectInterval = 1s # if connection breaks, user waits this much before trying to reconnect 
**.hostSSH[*].app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
**.hostSSH[*].app[0].stopOperationTimeout = 2s # timeout value for lifecycle stop operation 

# SSH server 
*.serverSSH.numApps = 1 
*.serverSSH.app[*].typename = "TcpGenericServerApp"
*.serverSSH.app[*].localAddress = "" # local address; may be left empty ("") 
*.serverSSH.app[*].localPort = 22 # localPort number to listen on 
*.serverSSH.app[*].replyDelay = 0s 
*.serverSSH.app[*].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverSSH.app[*].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=500..1000 step 100}kbps 
**.conn1.delay = ${del=20}ms 

[Config heatMapTestSSH_scale200]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 2*${del}*${TP} < 12000000 ?  12000000b : 2*${del}*${TP}b 

sim-time-limit=400s 

*.nSSH = 200 # Number of SSH clients 
*.nVID = 0 # Number of video clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# Remote Shell Client
**.hostSSH[*].numApps = 1
**.hostSSH[*].app[0].typename = "TcpSimpleSshAppV2lite"
**.hostSSH[*].app[0].localAddress = "" # local address or empty ("") 
**.hostSSH[*].app[0].localPort = -1 # local port number 
**.hostSSH[*].app[0].connectAddress = "serverSSH" # server address (may be symbolic)
**.hostSSH[*].app[0].connectPort = 22  # port number to connect to 
**.hostSSH[*].app[0].startTime = 0.01s # time first session begins 
**.hostSSH[*].app[0].stopTime = 100s # time of finishing sending, negative values mean forever 
**.hostSSH[*].app[0].numCommands = 1 # user types this many commands in a session 
**.hostSSH[*].app[0].commandLength = 10B # commands are this many characters (plus Enter) 
**.hostSSH[*].app[0].keyPressDelay = 0.05s # delay between keypresses 
**.hostSSH[*].app[0].commandOutputLength = 500B # commands produce this much output 
**.hostSSH[*].app[0].thinkTime = 1s # user waits this much before starting to type new command
**.hostSSH[*].app[0].idleInterval = 100s # time gap between sessions 
**.hostSSH[*].app[0].reconnectInterval = 1s # if connection breaks, user waits this much before trying to reconnect 
**.hostSSH[*].app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
**.hostSSH[*].app[0].stopOperationTimeout = 2s # timeout value for lifecycle stop operation 

# SSH server 
*.serverSSH.numApps = 1 
*.serverSSH.app[*].typename = "TcpGenericServerApp"
*.serverSSH.app[*].localAddress = "" # local address; may be left empty ("") 
*.serverSSH.app[*].localPort = 22 # localPort number to listen on 
*.serverSSH.app[*].replyDelay = 0s 
*.serverSSH.app[*].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverSSH.app[*].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=1000..2000 step 200}kbps 
**.conn1.delay = ${del=20}ms 

[Config heatMapTestVID_scale1]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 2*${del}*${TP} < 12000000 ?  12000000b : 2*${del}*${TP}b 

sim-time-limit=800s 

*.nVID = 1 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=100..1500 step 20}kbps 
**.conn1.delay = ${del=20}ms 

[Config heatMapTestVID_scale5]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 2*${del}*${TP} < 12000000 ?  12000000b : 2*${del}*${TP}b 

sim-time-limit=800s 

*.nVID = 5 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=500..7500 step 100}kbps 
**.conn1.delay = ${del=20}ms 

[Config heatMapTestVID_scale10]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 2*${del}*${TP} < 12000000 ?  12000000b : 2*${del}*${TP}b 

sim-time-limit=800s 

*.nVID = 10 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=1000..15000 step 200}kbps 
**.conn1.delay = ${del=20}ms 

[Config heatMapTestVID_scale50]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 2*${del}*${TP} < 12000000 ?  12000000b : 2*${del}*${TP}b 

sim-time-limit=800s 

*.nVID = 50 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=5000..75000 step 1000}kbps 
**.conn1.delay = ${del=20}ms 

[Config heatMapTestVID_scale100]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 2*${del}*${TP} < 12000000 ?  12000000b : 2*${del}*${TP}b 

sim-time-limit=800s 

*.nVID = 100 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=10000..150000 step 2000}kbps 
**.conn1.delay = ${del=20}ms 

[Config heatMapTestVID_scale200]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 2*${del}*${TP} < 12000000 ?  12000000b : 2*${del}*${TP}b 

sim-time-limit=800s 

*.nVID = 200 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=20000..300000 step 4000}kbps 
**.conn1.delay = ${del=20}ms 

[Config heatMapTestFDO_scale1]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 2*${del}*${TP} < 12000000 ?  12000000b : 2*${del}*${TP}b 

sim-time-limit=400s 

*.nFDO = 1 # Number of file download clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostFDO[*].numApps = 1 
# File download client 
*.hostFDO[*].app[0].typename = "TcpFileDownloadApp" 
*.hostFDO[*].app[0].localAddress = "" 
*.hostFDO[*].app[0].localPort = -1 # port number to listen on 
*.hostFDO[*].app[0].connectAddress = "serverFDO" # server address (may be symbolic) 
*.hostFDO[*].app[0].connectPort = 1042 # port number to connect to 
*.hostFDO[*].app[0].startTime = 0.01s # time first session begins 
*.hostFDO[*].app[0].stopTime = -1s # time of finishing sending, negative values mean forever 
*.hostFDO[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
*.hostFDO[*].app[0].requestLength = 800B # length of a request 
*.hostFDO[*].app[0].replyLength = 10000KiB # length of a reply 
*.hostFDO[*].app[0].thinkTime = 0.01s # time gap between requests 
*.hostFDO[*].app[0].idleInterval = 1000s # time gap between sessions 
*.hostFDO[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
*.hostFDO[*].app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.hostFDO[*].app[0].stopOperationTimeout = 2s # timeout value for lifecycle stop operation 

# File download server 
*.serverFDO.numApps = 1 
*.serverFDO.app[0].typename = "TcpGenericServerApp" 
*.serverFDO.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverFDO.app[0].localPort = 1042 # localPort number to listen on 
*.serverFDO.app[0].replyDelay = 0s # 
*.serverFDO.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverFDO.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=100..2800 step 20}kbps 
**.conn1.delay = ${del=20}ms 

[Config heatMapTestFDO_scale5]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 2*${del}*${TP} < 12000000 ?  12000000b : 2*${del}*${TP}b 

sim-time-limit=400s 

*.nFDO = 5 # Number of file download clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostFDO[*].numApps = 1 
# File download client 
*.hostFDO[*].app[0].typename = "TcpFileDownloadApp" 
*.hostFDO[*].app[0].localAddress = "" 
*.hostFDO[*].app[0].localPort = -1 # port number to listen on 
*.hostFDO[*].app[0].connectAddress = "serverFDO" # server address (may be symbolic) 
*.hostFDO[*].app[0].connectPort = 1042 # port number to connect to 
*.hostFDO[*].app[0].startTime = 0.01s # time first session begins 
*.hostFDO[*].app[0].stopTime = -1s # time of finishing sending, negative values mean forever 
*.hostFDO[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
*.hostFDO[*].app[0].requestLength = 800B # length of a request 
*.hostFDO[*].app[0].replyLength = 10000KiB # length of a reply 
*.hostFDO[*].app[0].thinkTime = 0.01s # time gap between requests 
*.hostFDO[*].app[0].idleInterval = 1000s # time gap between sessions 
*.hostFDO[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
*.hostFDO[*].app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.hostFDO[*].app[0].stopOperationTimeout = 2s # timeout value for lifecycle stop operation 

# File download server 
*.serverFDO.numApps = 1 
*.serverFDO.app[0].typename = "TcpGenericServerApp" 
*.serverFDO.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverFDO.app[0].localPort = 1042 # localPort number to listen on 
*.serverFDO.app[0].replyDelay = 0s # 
*.serverFDO.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverFDO.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=500..14000 step 100}kbps 
**.conn1.delay = ${del=20}ms 

[Config heatMapTestFDO_scale10]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 2*${del}*${TP} < 12000000 ?  12000000b : 2*${del}*${TP}b 

sim-time-limit=400s 

*.nFDO = 10 # Number of file download clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostFDO[*].numApps = 1 
# File download client 
*.hostFDO[*].app[0].typename = "TcpFileDownloadApp" 
*.hostFDO[*].app[0].localAddress = "" 
*.hostFDO[*].app[0].localPort = -1 # port number to listen on 
*.hostFDO[*].app[0].connectAddress = "serverFDO" # server address (may be symbolic) 
*.hostFDO[*].app[0].connectPort = 1042 # port number to connect to 
*.hostFDO[*].app[0].startTime = 0.01s # time first session begins 
*.hostFDO[*].app[0].stopTime = -1s # time of finishing sending, negative values mean forever 
*.hostFDO[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
*.hostFDO[*].app[0].requestLength = 800B # length of a request 
*.hostFDO[*].app[0].replyLength = 10000KiB # length of a reply 
*.hostFDO[*].app[0].thinkTime = 0.01s # time gap between requests 
*.hostFDO[*].app[0].idleInterval = 1000s # time gap between sessions 
*.hostFDO[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
*.hostFDO[*].app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.hostFDO[*].app[0].stopOperationTimeout = 2s # timeout value for lifecycle stop operation 

# File download server 
*.serverFDO.numApps = 1 
*.serverFDO.app[0].typename = "TcpGenericServerApp" 
*.serverFDO.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverFDO.app[0].localPort = 1042 # localPort number to listen on 
*.serverFDO.app[0].replyDelay = 0s # 
*.serverFDO.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverFDO.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=1000..28000 step 200}kbps 
**.conn1.delay = ${del=20}ms 

[Config heatMapTestFDO_scale50]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 2*${del}*${TP} < 12000000 ?  12000000b : 2*${del}*${TP}b 

sim-time-limit=400s 

*.nFDO = 50 # Number of file download clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostFDO[*].numApps = 1 
# File download client 
*.hostFDO[*].app[0].typename = "TcpFileDownloadApp" 
*.hostFDO[*].app[0].localAddress = "" 
*.hostFDO[*].app[0].localPort = -1 # port number to listen on 
*.hostFDO[*].app[0].connectAddress = "serverFDO" # server address (may be symbolic) 
*.hostFDO[*].app[0].connectPort = 1042 # port number to connect to 
*.hostFDO[*].app[0].startTime = 0.01s # time first session begins 
*.hostFDO[*].app[0].stopTime = -1s # time of finishing sending, negative values mean forever 
*.hostFDO[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
*.hostFDO[*].app[0].requestLength = 800B # length of a request 
*.hostFDO[*].app[0].replyLength = 10000KiB # length of a reply 
*.hostFDO[*].app[0].thinkTime = 0.01s # time gap between requests 
*.hostFDO[*].app[0].idleInterval = 1000s # time gap between sessions 
*.hostFDO[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
*.hostFDO[*].app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.hostFDO[*].app[0].stopOperationTimeout = 2s # timeout value for lifecycle stop operation 

# File download server 
*.serverFDO.numApps = 1 
*.serverFDO.app[0].typename = "TcpGenericServerApp" 
*.serverFDO.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverFDO.app[0].localPort = 1042 # localPort number to listen on 
*.serverFDO.app[0].replyDelay = 0s # 
*.serverFDO.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverFDO.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=5000..140000 step 1000}kbps 
**.conn1.delay = ${del=20}ms 

[Config heatMapTestFDO_scale100]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 2*${del}*${TP} < 12000000 ?  12000000b : 2*${del}*${TP}b 

sim-time-limit=400s 

*.nFDO = 100 # Number of file download clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostFDO[*].numApps = 1 
# File download client 
*.hostFDO[*].app[0].typename = "TcpFileDownloadApp" 
*.hostFDO[*].app[0].localAddress = "" 
*.hostFDO[*].app[0].localPort = -1 # port number to listen on 
*.hostFDO[*].app[0].connectAddress = "serverFDO" # server address (may be symbolic) 
*.hostFDO[*].app[0].connectPort = 1042 # port number to connect to 
*.hostFDO[*].app[0].startTime = 0.01s # time first session begins 
*.hostFDO[*].app[0].stopTime = -1s # time of finishing sending, negative values mean forever 
*.hostFDO[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
*.hostFDO[*].app[0].requestLength = 800B # length of a request 
*.hostFDO[*].app[0].replyLength = 10000KiB # length of a reply 
*.hostFDO[*].app[0].thinkTime = 0.01s # time gap between requests 
*.hostFDO[*].app[0].idleInterval = 1000s # time gap between sessions 
*.hostFDO[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
*.hostFDO[*].app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.hostFDO[*].app[0].stopOperationTimeout = 2s # timeout value for lifecycle stop operation 

# File download server 
*.serverFDO.numApps = 1 
*.serverFDO.app[0].typename = "TcpGenericServerApp" 
*.serverFDO.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverFDO.app[0].localPort = 1042 # localPort number to listen on 
*.serverFDO.app[0].replyDelay = 0s # 
*.serverFDO.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverFDO.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=10000..280000 step 2000}kbps 
**.conn1.delay = ${del=20}ms 

[Config heatMapTestFDO_scale200]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 2*${del}*${TP} < 12000000 ?  12000000b : 2*${del}*${TP}b 

sim-time-limit=400s 

*.nFDO = 200 # Number of file download clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostFDO[*].numApps = 1 
# File download client 
*.hostFDO[*].app[0].typename = "TcpFileDownloadApp" 
*.hostFDO[*].app[0].localAddress = "" 
*.hostFDO[*].app[0].localPort = -1 # port number to listen on 
*.hostFDO[*].app[0].connectAddress = "serverFDO" # server address (may be symbolic) 
*.hostFDO[*].app[0].connectPort = 1042 # port number to connect to 
*.hostFDO[*].app[0].startTime = 0.01s # time first session begins 
*.hostFDO[*].app[0].stopTime = -1s # time of finishing sending, negative values mean forever 
*.hostFDO[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
*.hostFDO[*].app[0].requestLength = 800B # length of a request 
*.hostFDO[*].app[0].replyLength = 10000KiB # length of a reply 
*.hostFDO[*].app[0].thinkTime = 0.01s # time gap between requests 
*.hostFDO[*].app[0].idleInterval = 1000s # time gap between sessions 
*.hostFDO[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
*.hostFDO[*].app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.hostFDO[*].app[0].stopOperationTimeout = 2s # timeout value for lifecycle stop operation 

# File download server 
*.serverFDO.numApps = 1 
*.serverFDO.app[0].typename = "TcpGenericServerApp" 
*.serverFDO.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverFDO.app[0].localPort = 1042 # localPort number to listen on 
*.serverFDO.app[0].replyDelay = 0s # 
*.serverFDO.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverFDO.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=20000..560000 step 4000}kbps 
**.conn1.delay = ${del=20}ms 

[Config heatMapTestLVD_scale1]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 2*${del}*${TP} < 12000000 ?  12000000b : 2*${del}*${TP}b 

sim-time-limit=400s 

*.nLVD = 1 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=100..1900 step 20}kbps 
**.conn1.delay = ${del=20}ms 

[Config heatMapTestLVD_scale5]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 2*${del}*${TP} < 12000000 ?  12000000b : 2*${del}*${TP}b 

sim-time-limit=400s 

*.nLVD = 5 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=500..9500 step 100}kbps 
**.conn1.delay = ${del=20}ms 

[Config heatMapTestLVD_scale10]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 2*${del}*${TP} < 12000000 ?  12000000b : 2*${del}*${TP}b 

sim-time-limit=400s 

*.nLVD = 10 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=1000..19000 step 200}kbps 
**.conn1.delay = ${del=20}ms 

[Config heatMapTestLVD_scale50]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 2*${del}*${TP} < 12000000 ?  12000000b : 2*${del}*${TP}b 

sim-time-limit=400s 

*.nLVD = 50 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=5000..95000 step 1000}kbps 
#5000..10500
**.conn1.delay = ${del=20}ms 

[Config heatMapTestLVD_scale100]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 2*${del}*${TP} < 12000000 ?  12000000b : 2*${del}*${TP}b 

sim-time-limit=400s 

*.nLVD = 100 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=10000..190000 step 2000}kbps 
**.conn1.delay = ${del=20}ms 

[Config heatMapTestLVD_scale200]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 2*${del}*${TP}b 
#2*${del}*${TP} < 12000000 ?  12000000b : 2*${del}*${TP}b 

sim-time-limit=400s 

*.nLVD = 200 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=20000..380000 step 4000}kbps 
**.conn1.delay = ${del=20}ms 

[Config heatMapTestVIP_scale1]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 2*${del}*${TP} < 12000000 ?  12000000b : 2*${del}*${TP}b 

sim-time-limit=80s 

*.nVIP = 1 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=5..30 step 1}kbps 
**.conn1.delay = ${del=20}ms 

[Config heatMapTestVIP_scale5]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 2*${del}*${TP} < 12000000 ?  12000000b : 2*${del}*${TP}b 

sim-time-limit=80s 

*.nVIP = 5 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=25..150 step 5}kbps 
**.conn1.delay = ${del=20}ms 

[Config heatMapTestVIP_scale10]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 2*${del}*${TP} < 12000000 ?  12000000b : 2*${del}*${TP}b 

sim-time-limit=80s 

*.nVIP = 10 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=50..300 step 10}kbps 
**.conn1.delay = ${del=20}ms 

[Config heatMapTestVIP_scale50]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 2*${del}*${TP} < 12000000 ?  12000000b : 2*${del}*${TP}b 

sim-time-limit=80s 

*.nVIP = 50 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=250..1500 step 50}kbps 
**.conn1.delay = ${del=20}ms 

[Config heatMapTestVIP_scale100]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 2*${del}*${TP} < 12000000 ?  12000000b : 2*${del}*${TP}b 

sim-time-limit=80s 

*.nVIP = 100 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=500..3000 step 100}kbps 
**.conn1.delay = ${del=20}ms 

[Config heatMapTestVIP_scale200]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 2*${del}*${TP} < 12000000 ?  12000000b : 2*${del}*${TP}b 

sim-time-limit=80s 

*.nVIP = 200 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=1000..6000 step 200}kbps 
**.conn1.delay = ${del=20}ms 


[Config v2heatMapTestVID_scale10]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 2*${del}*${TP}b

sim-time-limit=800s 

*.nVID = 10 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=1000..15000 step 200}kbps 
**.conn1.delay = ${del=20}ms 



[Config queue12MbheatMapTestVID_scale20]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 12000000b  

sim-time-limit=800s 

*.nVID = 20 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=2000..30000 step 400}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue12MbheatMapTestVID_scale30]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 12000000b  

sim-time-limit=800s 

*.nVID = 30 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=3000..45000 step 600}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue12MbheatMapTestVID_scale40]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 12000000b  

sim-time-limit=800s 

*.nVID = 40 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=4000..60000 step 800}kbps 
**.conn1.delay = ${del=20}ms 



[Config queue6MbheatMapTestVID_scale20]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 6000000b  

sim-time-limit=800s 

*.nVID = 20 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=2000..30000 step 400}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue6MbheatMapTestVID_scale30]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 6000000b  

sim-time-limit=800s 

*.nVID = 30 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=3000..45000 step 600}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue6MbheatMapTestVID_scale40]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 6000000b  

sim-time-limit=800s 

*.nVID = 40 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=4000..60000 step 800}kbps 
**.conn1.delay = ${del=20}ms 



[Config smallQueueheatMapTestVID_scale20]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 2*${del}*${TP}b   

sim-time-limit=800s 

*.nVID = 20 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=2000..30000 step 400}kbps 
**.conn1.delay = ${del=20}ms 

[Config smallQueueheatMapTestVID_scale30]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 2*${del}*${TP}b   

sim-time-limit=800s 

*.nVID = 30 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=3000..45000 step 600}kbps 
**.conn1.delay = ${del=20}ms 

[Config smallQueueheatMapTestVID_scale40]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 2*${del}*${TP}b   

sim-time-limit=800s 

*.nVID = 40 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=4000..60000 step 800}kbps 
**.conn1.delay = ${del=20}ms 

[Config smallQueueheatMapTestVID_scale1]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 2*${del}*${TP}b   

sim-time-limit=800s 

*.nVID = 1 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=100..1500 step 20}kbps 
**.conn1.delay = ${del=20}ms 


[Config queue12MbVID_scale1]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  12000000b 

sim-time-limit=800s 

*.nVID = 1 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=100..1500 step 20}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue12MbVID_scale10]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  12000000b 

sim-time-limit=800s 

*.nVID = 10 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=1000..15000 step 200}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue12MbVID_scale20]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  12000000b 

sim-time-limit=800s 

*.nVID = 20 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=2000..30000 step 400}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue12MbVID_scale30]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  12000000b 

sim-time-limit=800s 

*.nVID = 30 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=3000..45000 step 600}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue12MbVID_scale40]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  12000000b 

sim-time-limit=800s 

*.nVID = 40 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=4000..60000 step 800}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue12MbVID_scale50]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  12000000b 

sim-time-limit=800s 

*.nVID = 50 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=5000..75000 step 1000}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue12MbVID_scale60]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  12000000b 

sim-time-limit=800s 

*.nVID = 60 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=6000..90000 step 1200}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue12MbVID_scale70]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  12000000b 

sim-time-limit=800s 

*.nVID = 70 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=7000..105000 step 1400}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue12MbVID_scale80]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  12000000b 

sim-time-limit=800s 

*.nVID = 80 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=8000..120000 step 1600}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue12MbVID_scale90]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  12000000b 

sim-time-limit=800s 

*.nVID = 90 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=9000..135000 step 1800}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue12MbVID_scale100]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  12000000b 

sim-time-limit=800s 

*.nVID = 100 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=10000..150000 step 2000}kbps 
**.conn1.delay = ${del=20}ms 



[Config queue12MbVID_scale150]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  12000000b 

sim-time-limit=800s 

*.nVID = 150 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=15000..225000 step 3000}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue12MbVID_scale200]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  12000000b 

sim-time-limit=800s 

*.nVID = 200 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=20000..300000 step 4000}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue12MbVID_scale250]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  12000000b 

sim-time-limit=800s 

*.nVID = 250 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=25000..375000 step 5000}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue12MbVID_scale300]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  12000000b 

sim-time-limit=800s 

*.nVID = 300 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=30000..450000 step 6000}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue6MbVID_scale1]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  6000000b 

sim-time-limit=800s 

*.nVID = 1 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=100..1500 step 20}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue6MbVID_scale10]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  6000000b 

sim-time-limit=800s 

*.nVID = 10 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=1000..15000 step 200}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue6MbVID_scale20]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  6000000b 

sim-time-limit=800s 

*.nVID = 20 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=2000..30000 step 400}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue6MbVID_scale30]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  6000000b 

sim-time-limit=800s 

*.nVID = 30 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=3000..45000 step 600}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue6MbVID_scale40]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  6000000b 

sim-time-limit=800s 

*.nVID = 40 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=4000..60000 step 800}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue6MbVID_scale50]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  6000000b 

sim-time-limit=800s 

*.nVID = 50 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=5000..75000 step 1000}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue6MbVID_scale60]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  6000000b 

sim-time-limit=800s 

*.nVID = 60 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=6000..90000 step 1200}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue6MbVID_scale70]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  6000000b 

sim-time-limit=800s 

*.nVID = 70 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=7000..105000 step 1400}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue6MbVID_scale80]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  6000000b 

sim-time-limit=800s 

*.nVID = 80 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=8000..120000 step 1600}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue6MbVID_scale90]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  6000000b 

sim-time-limit=800s 

*.nVID = 90 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=9000..135000 step 1800}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue6MbVID_scale100]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  6000000b 

sim-time-limit=800s 

*.nVID = 100 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=10000..150000 step 2000}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue6MbVID_scale150]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  6000000b 

sim-time-limit=800s 

*.nVID = 150 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=15000..225000 step 3000}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue6MbVID_scale200]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  6000000b 

sim-time-limit=800s 

*.nVID = 200 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=20000..300000 step 4000}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue6MbVID_scale250]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  6000000b 

sim-time-limit=800s 

*.nVID = 250 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=25000..375000 step 5000}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue6MbVID_scale300]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  6000000b 

sim-time-limit=800s 

*.nVID = 300 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=30000..450000 step 6000}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue3MbVID_scale1]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  3000000b 

sim-time-limit=800s 

*.nVID = 1 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=100..1500 step 20}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue3MbVID_scale10]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  3000000b 

sim-time-limit=800s 

*.nVID = 10 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=1000..15000 step 200}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue3MbVID_scale20]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  3000000b 

sim-time-limit=800s 

*.nVID = 20 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=2000..30000 step 400}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue3MbVID_scale30]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  3000000b 

sim-time-limit=800s 

*.nVID = 30 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=3000..45000 step 600}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue3MbVID_scale40]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  3000000b 

sim-time-limit=800s 

*.nVID = 40 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=4000..60000 step 800}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue3MbVID_scale50]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  3000000b 

sim-time-limit=800s 

*.nVID = 50 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=5000..75000 step 1000}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue3MbVID_scale60]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  3000000b 

sim-time-limit=800s 

*.nVID = 60 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=6000..90000 step 1200}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue3MbVID_scale70]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  3000000b 

sim-time-limit=800s 

*.nVID = 70 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=7000..105000 step 1400}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue3MbVID_scale80]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  3000000b 

sim-time-limit=800s 

*.nVID = 80 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=8000..120000 step 1600}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue3MbVID_scale90]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  3000000b 

sim-time-limit=800s 

*.nVID = 90 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=9000..135000 step 1800}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue3MbVID_scale100]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  3000000b 

sim-time-limit=800s 

*.nVID = 100 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=10000..150000 step 2000}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue3MbVID_scale150]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  3000000b 

sim-time-limit=800s 

*.nVID = 150 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=15000..225000 step 3000}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue3MbVID_scale200]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  3000000b 

sim-time-limit=800s 

*.nVID = 200 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=20000..300000 step 4000}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue3MbVID_scale250]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  3000000b 

sim-time-limit=800s 

*.nVID = 250 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=25000..375000 step 5000}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue3MbVID_scale300]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  3000000b 

sim-time-limit=800s 

*.nVID = 300 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=30000..450000 step 6000}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue3MbLVD_scale1]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  3000000b 

sim-time-limit=400s 

*.nLVD = 1 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=100..1900 step 20}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue3MbLVD_scale10]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  3000000b 

sim-time-limit=400s 

*.nLVD = 10 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=1000..19000 step 200}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue3MbLVD_scale20]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  3000000b 

sim-time-limit=400s 

*.nLVD = 20 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=2000..38000 step 400}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue3MbLVD_scale30]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  3000000b 

sim-time-limit=400s 

*.nLVD = 30 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=3000..57000 step 600}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue3MbLVD_scale40]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  3000000b 

sim-time-limit=400s 

*.nLVD = 40 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=4000..76000 step 800}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue3MbLVD_scale50]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  3000000b 

sim-time-limit=400s 

*.nLVD = 50 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=5000..95000 step 1000}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue3MbLVD_scale60]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  3000000b 

sim-time-limit=400s 

*.nLVD = 60 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=6000..114000 step 1200}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue3MbLVD_scale70]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  3000000b 

sim-time-limit=400s 

*.nLVD = 70 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=7000..133000 step 1400}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue3MbLVD_scale80]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  3000000b 

sim-time-limit=400s 

*.nLVD = 80 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=8000..152000 step 1600}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue3MbLVD_scale90]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  3000000b 

sim-time-limit=400s 

*.nLVD = 90 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=9000..171000 step 1800}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue3MbLVD_scale100]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  3000000b 

sim-time-limit=400s 

*.nLVD = 100 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=10000..190000 step 2000}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue3MbLVD_scale150]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  3000000b 

sim-time-limit=400s 

*.nLVD = 150 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=15000..285000 step 3000}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue3MbLVD_scale200]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  3000000b 

sim-time-limit=400s 

*.nLVD = 200 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=20000..380000 step 4000}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue3MbLVD_scale250]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  3000000b 

sim-time-limit=400s 

*.nLVD = 250 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=25000..475000 step 5000}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue3MbLVD_scale300]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  3000000b 

sim-time-limit=400s 

*.nLVD = 300 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=30000..570000 step 6000}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue6MbLVD_scale1]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  6000000b 

sim-time-limit=400s 

*.nLVD = 1 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=100..1900 step 20}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue6MbLVD_scale10]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  6000000b 

sim-time-limit=400s 

*.nLVD = 10 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=1000..19000 step 200}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue6MbLVD_scale20]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  6000000b 

sim-time-limit=400s 

*.nLVD = 20 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=2000..38000 step 400}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue6MbLVD_scale30]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  6000000b 

sim-time-limit=400s 

*.nLVD = 30 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=3000..57000 step 600}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue6MbLVD_scale40]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  6000000b 

sim-time-limit=400s 

*.nLVD = 40 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=4000..76000 step 800}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue6MbLVD_scale50]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  6000000b 

sim-time-limit=400s 

*.nLVD = 50 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=5000..95000 step 1000}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue6MbLVD_scale60]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  6000000b 

sim-time-limit=400s 

*.nLVD = 60 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=6000..114000 step 1200}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue6MbLVD_scale70]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  6000000b 

sim-time-limit=400s 

*.nLVD = 70 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=7000..133000 step 1400}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue6MbLVD_scale80]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  6000000b 

sim-time-limit=400s 

*.nLVD = 80 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=8000..152000 step 1600}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue6MbLVD_scale90]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  6000000b 

sim-time-limit=400s 

*.nLVD = 90 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=9000..171000 step 1800}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue6MbLVD_scale100]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  6000000b 

sim-time-limit=400s 

*.nLVD = 100 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=10000..190000 step 2000}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue6MbLVD_scale150]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  6000000b 

sim-time-limit=400s 

*.nLVD = 150 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=15000..285000 step 3000}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue6MbLVD_scale200]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  6000000b 

sim-time-limit=400s 

*.nLVD = 200 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=20000..380000 step 4000}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue6MbLVD_scale250]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  6000000b 

sim-time-limit=400s 

*.nLVD = 250 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=25000..475000 step 5000}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue6MbLVD_scale300]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  6000000b 

sim-time-limit=400s 

*.nLVD = 300 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=30000..570000 step 6000}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue12MbLVD_scale1]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  12000000b 

sim-time-limit=400s 

*.nLVD = 1 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=100..1900 step 20}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue12MbLVD_scale10]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  12000000b 

sim-time-limit=400s 

*.nLVD = 10 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=1000..19000 step 200}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue12MbLVD_scale20]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  12000000b 

sim-time-limit=400s 

*.nLVD = 20 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=2000..38000 step 400}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue12MbLVD_scale30]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  12000000b 

sim-time-limit=400s 

*.nLVD = 30 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=3000..57000 step 600}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue12MbLVD_scale40]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  12000000b 

sim-time-limit=400s 

*.nLVD = 40 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=4000..76000 step 800}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue12MbLVD_scale50]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  12000000b 

sim-time-limit=400s 

*.nLVD = 50 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=5000..95000 step 1000}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue12MbLVD_scale60]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  12000000b 

sim-time-limit=400s 

*.nLVD = 60 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=6000..114000 step 1200}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue12MbLVD_scale70]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  12000000b 

sim-time-limit=400s 

*.nLVD = 70 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=7000..133000 step 1400}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue12MbLVD_scale80]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  12000000b 

sim-time-limit=400s 

*.nLVD = 80 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=8000..152000 step 1600}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue12MbLVD_scale90]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  12000000b 

sim-time-limit=400s 

*.nLVD = 90 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=9000..171000 step 1800}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue12MbLVD_scale100]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  12000000b 

sim-time-limit=400s 

*.nLVD = 100 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=10000..190000 step 2000}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue12MbLVD_scale150]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  12000000b 

sim-time-limit=400s 

*.nLVD = 150 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=15000..285000 step 3000}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue12MbLVD_scale200]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  12000000b 

sim-time-limit=400s 

*.nLVD = 200 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=20000..380000 step 4000}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue12MbLVD_scale250]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  12000000b 

sim-time-limit=400s 

*.nLVD = 250 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=25000..475000 step 5000}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue12MbLVD_scale300]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  12000000b 

sim-time-limit=400s 

*.nLVD = 300 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=30000..570000 step 6000}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpVID_scale1]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  2*${del}*${TP}b/sqrt(1)  

sim-time-limit=800s 

*.nVID = 1 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=100..1500 step 20}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpVID_scale10]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  2*${del}*${TP}b  

sim-time-limit=800s 

*.nVID = 10 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=1000..15000 step 200}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpVID_scale20]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  2*${del}*${TP}b  

sim-time-limit=800s 

*.nVID = 20 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=2000..30000 step 400}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpVID_scale30]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  2*${del}*${TP}b  

sim-time-limit=800s 

*.nVID = 30 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=3000..45000 step 600}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpVID_scale40]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  2*${del}*${TP}b  

sim-time-limit=800s 

*.nVID = 40 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=4000..60000 step 800}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpVID_scale50]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  2*${del}*${TP}b  

sim-time-limit=800s 

*.nVID = 50 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=5000..75000 step 1000}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpVID_scale60]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  2*${del}*${TP}b  

sim-time-limit=800s 

*.nVID = 60 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=6000..90000 step 1200}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpVID_scale70]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  2*${del}*${TP}b  

sim-time-limit=800s 

*.nVID = 70 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=7000..105000 step 1400}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpVID_scale80]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  2*${del}*${TP}b  

sim-time-limit=800s 

*.nVID = 80 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=8000..120000 step 1600}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpVID_scale90]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  2*${del}*${TP}b  

sim-time-limit=800s 

*.nVID = 90 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=9000..135000 step 1800}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpVID_scale100]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  2*${del}*${TP}b  

sim-time-limit=800s 

*.nVID = 100 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=10000..150000 step 2000}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpSqrtVID_scale1]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b/sqrt(1)) 

sim-time-limit=800s 

*.nVID = 1 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=100..1500 step 20}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpSqrtVID_scale10]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b/sqrt(10)) 

sim-time-limit=800s 

*.nVID = 10 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=1000..15000 step 200}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpSqrtVID_scale20]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b/sqrt(20)) 

sim-time-limit=800s 

*.nVID = 20 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=2000..30000 step 400}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpSqrtVID_scale30]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b/sqrt(30)) 

sim-time-limit=800s 

*.nVID = 30 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=3000..45000 step 600}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpSqrtVID_scale40]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b/sqrt(40)) 

sim-time-limit=800s 

*.nVID = 40 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=4000..60000 step 800}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpSqrtVID_scale50]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b/sqrt(50)) 

sim-time-limit=800s 

*.nVID = 50 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=5000..75000 step 1000}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpSqrtVID_scale60]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b/sqrt(60)) 

sim-time-limit=800s 

*.nVID = 60 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=6000..90000 step 1200}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpSqrtVID_scale70]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b/sqrt(70)) 

sim-time-limit=800s 

*.nVID = 70 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=7000..105000 step 1400}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpSqrtVID_scale80]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b/sqrt(80)) 

sim-time-limit=800s 

*.nVID = 80 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=8000..120000 step 1600}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpSqrtVID_scale90]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b/sqrt(90)) 

sim-time-limit=800s 

*.nVID = 90 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=9000..135000 step 1800}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpSqrtVID_scale100]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b/sqrt(100)) 

sim-time-limit=800s 

*.nVID = 100 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=10000..150000 step 2000}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue10BdpVID_scale1]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b*10) 

sim-time-limit=800s 

*.nVID = 1 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=100..1500 step 20}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue10BdpVID_scale10]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b*10) 

sim-time-limit=800s 

*.nVID = 10 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=1000..15000 step 200}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue10BdpVID_scale20]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b*10) 

sim-time-limit=800s 

*.nVID = 20 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=2000..30000 step 400}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue10BdpVID_scale30]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b*10) 

sim-time-limit=800s 

*.nVID = 30 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=3000..45000 step 600}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue10BdpVID_scale40]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b*10) 

sim-time-limit=800s 

*.nVID = 40 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=4000..60000 step 800}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue10BdpVID_scale50]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b*10) 

sim-time-limit=800s 

*.nVID = 50 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=5000..75000 step 1000}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue10BdpVID_scale60]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b*10) 

sim-time-limit=800s 

*.nVID = 60 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=6000..90000 step 1200}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue10BdpVID_scale70]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b*10) 

sim-time-limit=800s 

*.nVID = 70 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=7000..105000 step 1400}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue10BdpVID_scale80]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b*10) 

sim-time-limit=800s 

*.nVID = 80 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=8000..120000 step 1600}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue10BdpVID_scale90]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b*10) 

sim-time-limit=800s 

*.nVID = 90 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=9000..135000 step 1800}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue10BdpVID_scale100]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b*10) 

sim-time-limit=800s 

*.nVID = 100 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=10000..150000 step 2000}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue10BdpLVD_scale1]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b*10) 

sim-time-limit=400s 

*.nLVD = 1 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=100..1900 step 20}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue10BdpLVD_scale10]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b*10) 

sim-time-limit=400s 

*.nLVD = 10 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=1000..19000 step 200}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue10BdpLVD_scale20]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b*10) 

sim-time-limit=400s 

*.nLVD = 20 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=2000..38000 step 400}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue10BdpLVD_scale30]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b*10) 

sim-time-limit=400s 

*.nLVD = 30 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=3000..57000 step 600}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue10BdpLVD_scale40]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b*10) 

sim-time-limit=400s 

*.nLVD = 40 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=4000..76000 step 800}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue10BdpLVD_scale50]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b*10) 

sim-time-limit=400s 

*.nLVD = 50 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=5000..95000 step 1000}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue10BdpLVD_scale60]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b*10) 

sim-time-limit=400s 

*.nLVD = 60 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=6000..114000 step 1200}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue10BdpLVD_scale70]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b*10) 

sim-time-limit=400s 

*.nLVD = 70 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=7000..133000 step 1400}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue10BdpLVD_scale80]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b*10) 

sim-time-limit=400s 

*.nLVD = 80 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=8000..152000 step 1600}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue10BdpLVD_scale90]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b*10) 

sim-time-limit=400s 

*.nLVD = 90 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=9000..171000 step 1800}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue10BdpLVD_scale100]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b*10) 

sim-time-limit=400s 

*.nLVD = 100 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=10000..190000 step 2000}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpSqrtLVD_scale1]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b/sqrt(1)) 

sim-time-limit=400s 

*.nLVD = 1 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=100..1900 step 20}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpSqrtLVD_scale10]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b/sqrt(10)) 

sim-time-limit=400s 

*.nLVD = 10 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=1000..19000 step 200}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpSqrtLVD_scale20]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b/sqrt(20)) 

sim-time-limit=400s 

*.nLVD = 20 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=2000..38000 step 400}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpSqrtLVD_scale30]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b/sqrt(30)) 

sim-time-limit=400s 

*.nLVD = 30 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=3000..57000 step 600}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpSqrtLVD_scale40]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b/sqrt(40)) 

sim-time-limit=400s 

*.nLVD = 40 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=4000..76000 step 800}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpSqrtLVD_scale50]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b/sqrt(50)) 

sim-time-limit=400s 

*.nLVD = 50 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=5000..95000 step 1000}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpSqrtLVD_scale60]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b/sqrt(60)) 

sim-time-limit=400s 

*.nLVD = 60 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=6000..114000 step 1200}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpSqrtLVD_scale70]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b/sqrt(70)) 

sim-time-limit=400s 

*.nLVD = 70 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=7000..133000 step 1400}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpSqrtLVD_scale80]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b/sqrt(80)) 

sim-time-limit=400s 

*.nLVD = 80 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=8000..152000 step 1600}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpSqrtLVD_scale90]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b/sqrt(90)) 

sim-time-limit=400s 

*.nLVD = 90 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=9000..171000 step 1800}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpSqrtLVD_scale100]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b/sqrt(100)) 

sim-time-limit=400s 

*.nLVD = 100 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=10000..190000 step 2000}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpLVD_scale1]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  2*${del}*${TP}b 

sim-time-limit=400s 

*.nLVD = 1 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=100..1900 step 20}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpLVD_scale10]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  2*${del}*${TP}b 

sim-time-limit=400s 

*.nLVD = 10 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=1000..19000 step 200}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpLVD_scale20]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  2*${del}*${TP}b 

sim-time-limit=400s 

*.nLVD = 20 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=2000..38000 step 400}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpLVD_scale30]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  2*${del}*${TP}b 

sim-time-limit=400s 

*.nLVD = 30 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=3000..57000 step 600}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpLVD_scale40]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  2*${del}*${TP}b 

sim-time-limit=400s 

*.nLVD = 40 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=4000..76000 step 800}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpLVD_scale50]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  2*${del}*${TP}b 

sim-time-limit=400s 

*.nLVD = 50 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=5000..95000 step 1000}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpLVD_scale60]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  2*${del}*${TP}b 

sim-time-limit=400s 

*.nLVD = 60 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=6000..114000 step 1200}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpLVD_scale70]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  2*${del}*${TP}b 

sim-time-limit=400s 

*.nLVD = 70 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=7000..133000 step 1400}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpLVD_scale80]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  2*${del}*${TP}b 

sim-time-limit=400s 

*.nLVD = 80 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=8000..152000 step 1600}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpLVD_scale90]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  2*${del}*${TP}b 

sim-time-limit=400s 

*.nLVD = 90 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=9000..171000 step 1800}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpLVD_scale100]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  2*${del}*${TP}b 

sim-time-limit=400s 

*.nLVD = 100 # Number of live video clients 
*.nSSH = 0 # Number of SSH clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients
*.nVID = 0 # Number of video clients 

**.hostLVD[*].numApps = 1 
#Live video client 
**.hostLVD[*].app[0].typename = "TCPLiveVideoStreamCliAppLite" 
**.hostLVD[*].app[0].localAddress = "" # may be left empty ("") 
**.hostLVD[*].app[0].localPort = -1 # port number to listen on 
**.hostLVD[*].app[0].connectAddress = "serverLVD" # server address (may be symbolic) 
**.hostLVD[*].app[0].connectPort = 1042 # port number to connect to 
**.hostLVD[*].app[0].dataTransferMode = "object" 
**.hostLVD[*].app[0].startTime = 0.01s # time first session begins 
**.hostLVD[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostLVD[*].app[0].idleInterval = 1000s 
**.hostLVD[*].app[0].requestLength = 200B # length of a request 
**.hostLVD[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostLVD[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostLVD[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostLVD[*].app[0].video_resolution = "240 360 480 720 1080" # how many kbits are required for 1 second of video for each representation (quality levels) 
**.hostLVD[*].app[0].manifest_size = 100000 
**.hostLVD[*].app[0].video_buffer_max_length = 6s # buffer max length in seconds 
**.hostLVD[*].app[0].video_duration = 70s # video length in seconds 
**.hostLVD[*].app[0].useFlexibleBitrate = "flexible" 
**.hostLVD[*].app[0].video_type = "live" 
**.hostLVD[*].app[0].delay_threshold = 4 
**.hostLVD[*].app[0].speedup_rate = 1.05 

# Video server 
*.serverLVD.numApps = 1 
*.serverLVD.app[0].typename = "TcpGenericServerApp" 
*.serverLVD.app[0].localAddress = "" # local address; may be left empty ("")
*.serverLVD.app[0].localPort = 1042 # localPort number to listen on
*.serverLVD.app[0].replyDelay = 0s # 
*.serverLVD.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.serverLVD.app[0].stopOperationTimeout  = 2s # timeout value for lifecycle stop operation 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=10000..190000 step 2000}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue3MbVIP_scale1]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 3000000b 

sim-time-limit=80s 

*.nVIP = 1 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=5..30 step 1}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue3MbVIP_scale10]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 3000000b 

sim-time-limit=80s 

*.nVIP = 10 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=50..300 step 10}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue3MbVIP_scale20]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 3000000b 

sim-time-limit=80s 

*.nVIP = 20 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=100..600 step 20}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue3MbVIP_scale30]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 3000000b 

sim-time-limit=80s 

*.nVIP = 30 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=150..900 step 30}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue3MbVIP_scale40]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 3000000b 

sim-time-limit=80s 

*.nVIP = 40 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=200..1200 step 40}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue3MbVIP_scale50]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 3000000b 

sim-time-limit=80s 

*.nVIP = 50 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=250..1500 step 50}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue3MbVIP_scale60]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 3000000b 

sim-time-limit=80s 

*.nVIP = 60 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=300..1800 step 60}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue3MbVIP_scale70]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 3000000b 

sim-time-limit=80s 

*.nVIP = 70 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=350..2100 step 70}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue3MbVIP_scale80]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 3000000b 

sim-time-limit=80s 

*.nVIP = 80 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=400..2400 step 80}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue3MbVIP_scale90]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 3000000b 

sim-time-limit=80s 

*.nVIP = 90 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=450..2700 step 90}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue3MbVIP_scale100]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 3000000b 

sim-time-limit=80s 

*.nVIP = 100 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=500..3000 step 100}kbps 
**.conn1.delay = ${del=20}ms 


[Config queue6MbVIP_scale1]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 6000000b 

sim-time-limit=80s 

*.nVIP = 1 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=5..30 step 1}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue6MbVIP_scale10]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 6000000b 

sim-time-limit=80s 

*.nVIP = 10 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=50..300 step 10}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue6MbVIP_scale20]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 6000000b 

sim-time-limit=80s 

*.nVIP = 20 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=100..600 step 20}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue6MbVIP_scale30]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 6000000b 

sim-time-limit=80s 

*.nVIP = 30 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=150..900 step 30}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue6MbVIP_scale40]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 6000000b 

sim-time-limit=80s 

*.nVIP = 40 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=200..1200 step 40}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue6MbVIP_scale50]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 6000000b 

sim-time-limit=80s 

*.nVIP = 50 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=250..1500 step 50}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue6MbVIP_scale60]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 6000000b 

sim-time-limit=80s 

*.nVIP = 60 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=300..1800 step 60}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue6MbVIP_scale70]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 6000000b 

sim-time-limit=80s 

*.nVIP = 70 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=350..2100 step 70}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue6MbVIP_scale80]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 6000000b 

sim-time-limit=80s 

*.nVIP = 80 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=400..2400 step 80}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue6MbVIP_scale90]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 6000000b 

sim-time-limit=80s 

*.nVIP = 90 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=450..2700 step 90}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue6MbVIP_scale100]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 6000000b 

sim-time-limit=80s 

*.nVIP = 100 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=500..3000 step 100}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue12MbVIP_scale1]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 12000000b 

sim-time-limit=80s 

*.nVIP = 1 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=5..30 step 1}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue12MbVIP_scale10]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 12000000b 

sim-time-limit=80s 

*.nVIP = 10 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=50..300 step 10}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue12MbVIP_scale20]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 12000000b 

sim-time-limit=80s 

*.nVIP = 20 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=100..600 step 20}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue12MbVIP_scale30]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 12000000b 

sim-time-limit=80s 

*.nVIP = 30 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=150..900 step 30}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue12MbVIP_scale40]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 12000000b 

sim-time-limit=80s 

*.nVIP = 40 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=200..1200 step 40}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue12MbVIP_scale50]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 12000000b 

sim-time-limit=80s 

*.nVIP = 50 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=250..1500 step 50}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue12MbVIP_scale60]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 12000000b 

sim-time-limit=80s 

*.nVIP = 60 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=300..1800 step 60}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue12MbVIP_scale70]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 12000000b 

sim-time-limit=80s 

*.nVIP = 70 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=350..2100 step 70}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue12MbVIP_scale80]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 12000000b 

sim-time-limit=80s 

*.nVIP = 80 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=400..2400 step 80}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue12MbVIP_scale90]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 12000000b 

sim-time-limit=80s 

*.nVIP = 90 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=450..2700 step 90}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue12MbVIP_scale100]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity = 12000000b 

sim-time-limit=80s 

*.nVIP = 100 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=500..3000 step 100}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue10BdpVIP_scale1]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b*10) 

sim-time-limit=80s 

*.nVIP = 1 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=5..30 step 1}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue10BdpVIP_scale10]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b*10) 

sim-time-limit=80s 

*.nVIP = 10 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=50..300 step 10}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue10BdpVIP_scale20]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b*10) 

sim-time-limit=80s 

*.nVIP = 20 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=100..600 step 20}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue10BdpVIP_scale30]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b*10) 

sim-time-limit=80s 

*.nVIP = 30 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=150..900 step 30}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue10BdpVIP_scale40]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b*10) 

sim-time-limit=80s 

*.nVIP = 40 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=200..1200 step 40}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue10BdpVIP_scale50]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b*10) 

sim-time-limit=80s 

*.nVIP = 50 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=250..1500 step 50}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue10BdpVIP_scale60]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b*10) 

sim-time-limit=80s 

*.nVIP = 60 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=300..1800 step 60}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue10BdpVIP_scale70]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b*10) 

sim-time-limit=80s 

*.nVIP = 70 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=350..2100 step 70}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue10BdpVIP_scale80]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b*10) 

sim-time-limit=80s 

*.nVIP = 80 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=400..2400 step 80}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue10BdpVIP_scale90]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b*10) 

sim-time-limit=80s 

*.nVIP = 90 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=450..2700 step 90}kbps 
**.conn1.delay = ${del=20}ms 

[Config queue10BdpVIP_scale100]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b*10) 

sim-time-limit=80s 

*.nVIP = 100 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=500..3000 step 100}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpVIP_scale1]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  2*${del}*${TP}b 

sim-time-limit=80s 

*.nVIP = 1 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=5..30 step 1}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpVIP_scale10]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  2*${del}*${TP}b 

sim-time-limit=80s 

*.nVIP = 10 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=50..300 step 10}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpVIP_scale20]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  2*${del}*${TP}b 

sim-time-limit=80s 

*.nVIP = 20 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=100..600 step 20}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpVIP_scale30]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  2*${del}*${TP}b 

sim-time-limit=80s 

*.nVIP = 30 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=150..900 step 30}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpVIP_scale40]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  2*${del}*${TP}b 

sim-time-limit=80s 

*.nVIP = 40 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=200..1200 step 40}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpVIP_scale50]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  2*${del}*${TP}b 

sim-time-limit=80s 

*.nVIP = 50 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=250..1500 step 50}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpVIP_scale60]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  2*${del}*${TP}b 

sim-time-limit=80s 

*.nVIP = 60 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=300..1800 step 60}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpVIP_scale70]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  2*${del}*${TP}b 

sim-time-limit=80s 

*.nVIP = 70 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=350..2100 step 70}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpVIP_scale80]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  2*${del}*${TP}b 

sim-time-limit=80s 

*.nVIP = 80 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=400..2400 step 80}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpVIP_scale90]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  2*${del}*${TP}b 

sim-time-limit=80s 

*.nVIP = 90 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=450..2700 step 90}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpVIP_scale100]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  2*${del}*${TP}b 

sim-time-limit=80s 

*.nVIP = 100 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=500..3000 step 100}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpSqrtVIP_scale1]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b/sqrt(1)) 

sim-time-limit=80s 

*.nVIP = 1 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=5..30 step 1}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpSqrtVIP_scale10]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b/sqrt(10)) 

sim-time-limit=80s 

*.nVIP = 10 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=50..300 step 10}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpSqrtVIP_scale20]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b/sqrt(20)) 

sim-time-limit=80s 

*.nVIP = 20 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=100..600 step 20}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpSqrtVIP_scale30]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b/sqrt(30)) 

sim-time-limit=80s 

*.nVIP = 30 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=150..900 step 30}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpSqrtVIP_scale40]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b/sqrt(40)) 

sim-time-limit=80s 

*.nVIP = 40 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=200..1200 step 40}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpSqrtVIP_scale50]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b/sqrt(50)) 

sim-time-limit=80s 

*.nVIP = 50 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=250..1500 step 50}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpSqrtVIP_scale60]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b/sqrt(60)) 

sim-time-limit=80s 

*.nVIP = 60 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=300..1800 step 60}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpSqrtVIP_scale70]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b/sqrt(70)) 

sim-time-limit=80s 

*.nVIP = 70 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=350..2100 step 70}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpSqrtVIP_scale80]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b/sqrt(80)) 

sim-time-limit=80s 

*.nVIP = 80 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=400..2400 step 80}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpSqrtVIP_scale90]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b/sqrt(90)) 

sim-time-limit=80s 

*.nVIP = 90 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=450..2700 step 90}kbps 
**.conn1.delay = ${del=20}ms 

[Config queueBdpSqrtVIP_scale100]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  int(2*${del}*${TP}b/sqrt(100)) 

sim-time-limit=80s 

*.nVIP = 100 # Number of VIP clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nVID = 0 # Number of video clients 
*.nFDO = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

# VoIP receiver 
**.hostVIP[*].numApps = 1 
**.hostVIP[*].app[0].typename = "SimpleVoipReceiver" 
**.hostVIP[*].app[0].localPort = 2000 
**.hostVIP[*].app[0].emodelIe = 5 # Equipment impairment factor 
**.hostVIP[*].app[0].emodelBpl = 10 # Packet-loss robustness factor 
**.hostVIP[*].app[0].emodelA = 5 # Advantage factor 
**.hostVIP[*].app[0].emodelRo = 93.2 # Basic signal-to-noise ratio 
**.hostVIP[*].app[0].playoutDelay = 200ms # initial delay for beginning playout after receiving the first packet 
**.hostVIP[*].app[0].adaptivePlayoutDelay = false # if true, adjust playoutDelay after each talkspurt 
**.hostVIP[*].app[0].bufferSpace = 20 # buffer size in packets 
**.hostVIP[*].app[0].mosSpareTime = 1s # spare time before calculating MOS (after calculated playout time of last packet) 

# VoIP sender 
**.serverVIP.numApps = parent.nVIP 
**.serverVIP.app[*].typename = "SimpleVoipSender" 
**.serverVIP.app[*].localPort = -1 
**.serverVIP.app[*].destPort = 2000 
**.serverVIP.app[*].destAddress = "hostVIP[" + string(index) + "]" 
**.serverVIP.app[*].talkPacketSize = 40B # size of talk packets in bytes 
**.serverVIP.app[*].talkspurtDuration = weibull(1.423s, 0.824s) 
**.serverVIP.app[*].silenceDuration = weibull(0.899s, 1.089s) 
**.serverVIP.app[*].packetizationInterval = 20ms # interval between sending voice packets 
**.serverVIP.app[*].startTime = 0.01s 
**.serverVIP.app[*].stopTime = -1s # time of end of sending, -1 means forever 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=500..3000 step 100}kbps 
**.conn1.delay = ${del=20}ms 

[Config testqueue12MbVID_scale1]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  12000000b 

sim-time-limit=800s 

*.nVID = 1 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=100,563,1575}kbps 
**.conn1.delay = ${del=20}ms 

[Config testqueue12MbVID_scale10]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  12000000b 

sim-time-limit=800s 

*.nVID = 10 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=1000,5630,15750}kbps 
**.conn1.delay = ${del=20}ms 

[Config testqueue12MbVID_scale20]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  12000000b 

sim-time-limit=800s 

*.nVID = 20 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=2000,11260,31500}kbps 
**.conn1.delay = ${del=20}ms 

[Config testqueue12MbVID_scale30]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  12000000b 

sim-time-limit=800s 

*.nVID = 30 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=3000,16890,47250}kbps 
**.conn1.delay = ${del=20}ms 

[Config testqueue12MbVID_scale40]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  12000000b 

sim-time-limit=800s 

*.nVID = 40 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=4000,22520,63000}kbps 
**.conn1.delay = ${del=20}ms 

[Config testqueue12MbVID_scale50]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  12000000b 

sim-time-limit=800s 

*.nVID = 50 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=5000,28150,78750}kbps 
**.conn1.delay = ${del=20}ms 

[Config testqueue12MbVID_scale60]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  12000000b 

sim-time-limit=800s 

*.nVID = 60 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=6000,33780,94500}kbps 
**.conn1.delay = ${del=20}ms 

[Config testqueue12MbVID_scale70]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  12000000b 

sim-time-limit=800s 

*.nVID = 70 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=7000,39410,110250}kbps 
**.conn1.delay = ${del=20}ms 

[Config testqueue6MbVID_scale1]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  6000000b 

sim-time-limit=800s 

*.nVID = 1 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=100,563,1575}kbps 
**.conn1.delay = ${del=20}ms 

[Config testqueue6MbVID_scale10]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  6000000b 

sim-time-limit=800s 

*.nVID = 10 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=1000,5630,15750}kbps 
**.conn1.delay = ${del=20}ms 

[Config testqueue6MbVID_scale20]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  6000000b 

sim-time-limit=800s 

*.nVID = 20 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=2000,11260,31500}kbps 
**.conn1.delay = ${del=20}ms 

[Config testqueue6MbVID_scale30]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  6000000b 

sim-time-limit=800s 

*.nVID = 30 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=3000,16890,47250}kbps 
**.conn1.delay = ${del=20}ms 

[Config testqueue6MbVID_scale40]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  6000000b 

sim-time-limit=800s 

*.nVID = 40 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=4000,22520,63000}kbps 
**.conn1.delay = ${del=20}ms 

[Config testqueue6MbVID_scale50]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  6000000b 

sim-time-limit=800s 

*.nVID = 50 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=5000,28150,78750}kbps 
**.conn1.delay = ${del=20}ms 

[Config testqueue6MbVID_scale60]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  6000000b 

sim-time-limit=800s 

*.nVID = 60 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=6000,33780,94500}kbps 
**.conn1.delay = ${del=20}ms 

[Config testqueue6MbVID_scale70]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  6000000b 

sim-time-limit=800s 

*.nVID = 70 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=7000,39410,110250}kbps 
**.conn1.delay = ${del=20}ms 

[Config testqueue3MbVID_scale1]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  3000000b 

sim-time-limit=800s 

*.nVID = 1 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=100,563,1575}kbps 
**.conn1.delay = ${del=20}ms 

[Config testqueue3MbVID_scale10]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  3000000b 

sim-time-limit=800s 

*.nVID = 10 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=1000,5630,15750}kbps 
**.conn1.delay = ${del=20}ms 

[Config testqueue3MbVID_scale20]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  3000000b 

sim-time-limit=800s 

*.nVID = 20 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=2000,11260,31500}kbps 
**.conn1.delay = ${del=20}ms 

[Config testqueue3MbVID_scale30]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  3000000b 

sim-time-limit=800s 

*.nVID = 30 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=3000,16890,47250}kbps 
**.conn1.delay = ${del=20}ms 

[Config testqueue3MbVID_scale40]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  3000000b 

sim-time-limit=800s 

*.nVID = 40 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=4000,22520,63000}kbps 
**.conn1.delay = ${del=20}ms 

[Config testqueue3MbVID_scale50]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  3000000b 

sim-time-limit=800s 

*.nVID = 50 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=5000,28150,78750}kbps 
**.conn1.delay = ${del=20}ms 

[Config testqueue3MbVID_scale60]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  3000000b 

sim-time-limit=800s 

*.nVID = 60 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=6000,33780,94500}kbps 
**.conn1.delay = ${del=20}ms 

[Config testqueue3MbVID_scale70]
network = baselineTestV3 
output-vector-file = "${resultdir}/${configname}/${configname}-${runnumber}.vec"
output-scalar-file = "${resultdir}/${configname}/${configname}-${runnumber}.sca"

**.crcMode = "computed" 

**.dataCapacity =  3000000b 

sim-time-limit=800s 

*.nVID = 70 # Number of video clients 
*.nSSH = 0 # Number of SSH clients 
*.nLVD = 0 # Number of live video clients 
*.nFDO = 0 # Number of file download clients 
*.nVIP = 0 # Number of VoIP clients
*.nHVIP = 0 # Number of haptic VoIP clients

**.hostVID[*].numApps = 1 
# Video client 
**.hostVID[*].app[0].typename = "TCPVideoStreamCliAppV2lite"
**.hostVID[*].app[0].localAddress = "" # may be left empty ("") 
**.hostVID[*].app[0].localPort = -1 # port number to listen on 
**.hostVID[*].app[0].connectAddress = "serverVID" # server address (may be symbolic) 
**.hostVID[*].app[0].connectPort = 1042 # port number to connect to 
**.hostVID[*].app[0].dataTransferMode = "object" 
**.hostVID[*].app[0].startTime = 0.01s # time first session begins 
**.hostVID[*].app[0].stopTime = -1s # time of finish sending, 0 means infinity 
**.hostVID[*].app[0].idleInterval = 1000s
**.hostVID[*].app[0].requestLength = 200B # length of a request 
**.hostVID[*].app[0].reconnectInterval = 1s # if connection breaks, waits this much before trying to reconnect 
**.hostVID[*].app[0].numRequestsPerSession = 1 # number of requests sent per session 
**.hostVID[*].app[0].thinkTime = 1000s # time gap between requests 
**.hostVID[*].app[0].video_resolution = "360 480 720 1080" 
**.hostVID[*].app[0].manifest_size = 100000 
**.hostVID[*].app[0].video_buffer_max_length = 40s # buffer max length in seconds 
**.hostVID[*].app[0].video_duration = 300s # video length in seconds
**.hostVID[*].app[0].segment_length = 5s # video segment length in seconds
**.hostVID[*].app[0].useFlexibleBitrate = "flexible" 

# Video server 
*.serverVID.numApps = 1
*.serverVID.app[0].typename = "TcpGenericServerApp" 
*.serverVID.app[0].localAddress = "" # local address; may be left empty ("") 
*.serverVID.app[0].localPort = 1042 # localPort number to listen on 
*.serverVID.app[0].replyDelay = 0s # 
*.serverVID.app[0].stopOperationExtraTime = -1s # extra time after lifecycle stop operation finished 
*.server*.numApps = 0 
*.host*.numApps = 0 
 
**.conn1.datarate = ${TP=7000,39410,110250}kbps 
**.conn1.delay = ${del=20}ms 

